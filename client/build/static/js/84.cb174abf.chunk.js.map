{"version":3,"file":"static/js/84.cb174abf.chunk.js","mappings":"2NAgIA,UA5HsB,YAClBA,EAAAA,EAAAA,YAAU,WACNC,SAASC,MAAQ,0DACjBD,SAASE,cAAc,4BAA4BC,aAAa,UAAW,0IAC/E,GAAG,IAEH,IAAAC,GAAgCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAC5BI,GAA8CL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAnDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAC1CG,GAA8BT,EAAAA,EAAAA,UAAS,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAnCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,GAA8Bb,EAAAA,EAAAA,WAAS,GAAMc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,GAA4BjB,EAAAA,EAAAA,UAAS,CAAC,GAAEkB,GAAAhB,EAAAA,EAAAA,GAAAe,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAA8BrB,EAAAA,EAAAA,WAAS,GAAMsB,GAAApB,EAAAA,EAAAA,GAAAmB,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GACpBG,GAAQC,EAAAA,EAAAA,MAAYD,MACpBE,GAAWC,EAAAA,EAAAA,MACXC,EAAY,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,GAAC,IAAAC,EAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAIzB,GAHAN,EAAEO,iBACF9B,EAAW,IACXQ,EAAU,CAAC,KAEPjB,EAASwC,OAAS,GAAC,CAAAJ,EAAAE,KAAA,QAC2E,OAA9FrB,GAAU,SAAAD,GAAM,OAAAyB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUzB,GAAM,IAAEhB,SAAU,+CAA6C,IAAKoC,EAAAM,OAAA,oBAGtF,QAAQC,KAAK3C,IAAc,QAAQ2C,KAAK3C,GAAS,CAAAoC,EAAAE,KAAA,SAC6D,OAAtHrB,GAAU,SAAAD,GAAM,OAAAyB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUzB,GAAM,IAAEhB,SAAU,uEAAqE,IAAKoC,EAAAM,OAAA,qBAKtH1C,IAAaI,EAAe,CAAAgC,EAAAE,KAAA,SACoD,OAAhFrB,GAAU,SAAAD,GAAM,OAAAyB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUzB,GAAM,IAAEZ,gBAAiB,0BAAwB,IAAKgC,EAAAM,OAAA,kBAM/D,OAN+DN,EAAAC,KAAA,GAMhFxB,GAAW,GAAMuB,EAAAE,KAAA,GACMM,MAAM,2CAA4C,CACrEC,OAAQ,OACRC,YAAa,UACbC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAE5B,MAAAA,EAAOtB,SAAAA,MAC/B,KAAD,GALY,OAARiC,EAAQG,EAAAe,KAAAf,EAAAE,KAAA,GAOKL,EAASmB,OAAO,KAAD,GAChB,GADZlB,EAAIE,EAAAe,KACVtC,GAAW,IACPoB,EAASoB,GAAG,CAADjB,EAAAE,KAAA,SACX7B,EAAW,yCACXY,GAAW,GACXiC,YAAW,kBAAM9B,EAAS,SAAS,GAAE,KAAOY,EAAAE,KAAA,iBAEa,MAAzDrB,EAAU,CAAEjB,SAAUkC,EAAK1B,SAAW,mBAChC,IAAI+C,MAAMrB,EAAK1B,SAAW,kBAAkB,KAAD,GAAA4B,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAoB,GAAApB,EAAA,UAIrDvB,GAAW,GACXQ,GAAW,GACXJ,EAAU,CAAEjB,SAAUoC,EAAAoB,GAAMhD,SAAW,mBAAmB,yBAAA4B,EAAAqB,OAAA,GAAA1B,EAAA,oBAEjE,gBA9CiB2B,GAAA,OAAA/B,EAAAgC,MAAA,KAAAC,UAAA,KA4DlB,OACIC,EAAAA,EAAAA,MAAA,OAAKC,MAbS,CACdC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,SAChBC,QAAS,OACTC,SAAU,QACVC,OAAQ,OACRC,UAAW,OACXC,aAAc,QAIQC,SAAA,EAClBC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAKC,UAAU,KAAKC,MAAM,SAAQL,SAAC,oBAGvDX,EAAAA,EAAAA,MAAA,QAAMiB,SAAUpD,EAAa8C,SAAA,EACzBC,EAAAA,EAAAA,KAACM,EAAAA,EAAS,CACNC,KAAK,WACLC,MAAM,eACNC,KAAK,WACLC,MAAOnF,EACPoF,SAAU,SAACpD,GAAC,OAAK/B,EAAY+B,EAAEqD,OAAOF,MAAM,EAC5CG,WAAS,EACTjB,OAAO,SACPkB,UAAQ,EACRC,QAASxE,EAAOhB,SAChByF,WAAYzE,EAAOhB,YAEvByE,EAAAA,EAAAA,KAACM,EAAAA,EAAS,CACNC,KAAK,kBACLC,MAAM,mBACNC,KAAK,WACLC,MAAO/E,EACPgF,SAAU,SAACpD,GAAC,OAAK3B,EAAmB2B,EAAEqD,OAAOF,MAAM,EACnDG,WAAS,EACTjB,OAAO,SACPkB,UAAQ,EACRC,QAASxE,EAAOZ,gBAChBqF,WAAYzE,EAAOZ,mBAEvBqE,EAAAA,EAAAA,KAACiB,EAAAA,EAAM,CACHf,QAAQ,YACRgB,MAAM,UACNL,WAAS,EACTJ,KAAK,SACLU,SAAUhF,KAAaQ,EACvByE,GAAI,CAAEC,GAAI,EAAGC,OAAQ,QAASvB,SAE7B5D,GAAU6D,EAAAA,EAAAA,KAACuB,EAAAA,EAAgB,CAACC,KAAM,KAAS,mBAE/CzF,IACGiE,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACZ,MAAO,CAAE6B,MAAO,WAAaG,GAAI,EAAEtB,SAC1ChE,SAMzB,C","sources":["pages/ResetPassword.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Button, CircularProgress, TextField, Typography } from '@mui/material';\n\nconst ResetPassword = () => {\n    useEffect(() => {\n        document.title = \"Reset Your Password - Herba Naturals Account Assistance\";\n        document.querySelector('meta[name=\"description\"]').setAttribute(\"content\", \"Easily reset your Herba Naturals account password. Secure and efficient password recovery for uninterrupted access to our CBD products.\");\n    }, []);\n\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [message, setMessage] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [errors, setErrors] = useState({});\n    const [success, setSuccess] = useState(false)\n    const token = useParams().token; // Retrieve token from URL\n    const navigate = useNavigate();\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setMessage('');\n        setErrors({});\n        // Password length and strength validation\n        if (password.length < 8) {\n            setErrors(errors => ({ ...errors, password: 'Password must be at least 8 characters long' }));\n            return\n\n        } else if (!/[A-Z]/.test(password) || !/[0-9]/.test(password)) {\n            setErrors(errors => ({ ...errors, password: 'Password must contain at least one uppercase letter, and one number' }));\n            return\n\n        }\n\n        if (password !== confirmPassword) {\n            setErrors(errors => ({ ...errors, confirmPassword: 'Passwords do not match' }));\n            return;\n        }\n\n        try {\n\n            setLoading(true);\n            const response = await fetch('http://localhost:8000/api/reset-password', {\n                method: 'POST',\n                credentials: 'include',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ token, password })\n            });\n\n            const data = await response.json();\n            setLoading(false);\n            if (response.ok) {\n                setMessage('Password has been reset successfully!');\n                setSuccess(true)\n                setTimeout(() => navigate('/login'), 2000); // 2 seconds delay\n            } else {\n                setErrors({ password: data.message || 'Error occurred' })\n                throw new Error(data.message || 'Error occurred');\n                setSuccess(false)\n            }\n        } catch (error) {\n            setLoading(false);\n            setSuccess(false)\n            setErrors({ password: error.message || 'Error occurred' })\n        }\n    };\n\n    const formStyle = {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: '20px',\n        maxWidth: '400px',\n        margin: 'auto',\n        marginTop: '50px',\n        marginBottom: '50px',\n    };\n\n    return (\n        <div style={formStyle}>\n            <Typography variant=\"h5\" component=\"h1\" align=\"center\">\n                Reset Password\n            </Typography>\n            <form onSubmit={handleSubmit}>\n                <TextField\n                    name='password'\n                    label=\"New Password\"\n                    type=\"password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    fullWidth\n                    margin=\"normal\"\n                    required\n                    error={!!errors.password}\n                    helperText={errors.password}\n                />\n                <TextField\n                    name='confirmPassword'\n                    label=\"Confirm Password\"\n                    type=\"password\"\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                    fullWidth\n                    margin=\"normal\"\n                    required\n                    error={!!errors.confirmPassword}\n                    helperText={errors.confirmPassword}\n                />\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    type=\"submit\"\n                    disabled={loading || !!success}\n                    sx={{ mt: 2, height: '50px' }}\n                >\n                    {loading ? <CircularProgress size={24} /> : 'Reset Password'}\n                </Button>\n                {message && (\n                    <Typography style={{ color: '#30842E' }} mt={2}>\n                        {message}\n                    </Typography>\n                )}\n            </form>\n        </div>\n    );\n};\n\nexport default ResetPassword;\n"],"names":["useEffect","document","title","querySelector","setAttribute","_useState","useState","_useState2","_slicedToArray","password","setPassword","_useState3","_useState4","confirmPassword","setConfirmPassword","_useState5","_useState6","message","setMessage","_useState7","_useState8","loading","setLoading","_useState9","_useState10","errors","setErrors","_useState11","_useState12","success","setSuccess","token","useParams","navigate","useNavigate","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","response","data","wrap","_context","prev","next","preventDefault","length","_objectSpread","abrupt","test","fetch","method","credentials","headers","body","JSON","stringify","sent","json","ok","setTimeout","Error","t0","stop","_x","apply","arguments","_jsxs","style","display","flexDirection","alignItems","justifyContent","padding","maxWidth","margin","marginTop","marginBottom","children","_jsx","Typography","variant","component","align","onSubmit","TextField","name","label","type","value","onChange","target","fullWidth","required","error","helperText","Button","color","disabled","sx","mt","height","CircularProgress","size"],"sourceRoot":""}