{"version":3,"file":"static/js/204.f7a969d5.chunk.js","mappings":"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","sources":["components/ForgotPassword.jsx","pages/AccountDetails.jsx"],"sourcesContent":["import { Button, CircularProgress, IconButton, TextField, Typography } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\n\n// ForgotPassword.jsx\nconst ForgotPassword = ({ close, type, resetEmail, startCountdown, countdown, isButtonDisabled }) => {\n    const [email, setEmail] = useState(resetEmail || '');\n    const [message, setMessage] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [errors, setErrors] = useState({});\n\n\n\n\n\n    const handleSubmit = async (e) => {\n        setErrors({});\n\n        if (email.trim() === '') {\n            setErrors(errors => ({ ...errors, email: 'Email is required' }));\n            return\n        }\n        else {\n            const emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\n            if (!emailRegex.test(email.trim())) {\n\n                setErrors(errors => ({ ...errors, email: 'Please enter a valid email address' }));\n\n                return\n            }\n\n        }\n        e.preventDefault();\n        try {\n            setLoading(true);\n\n            const response = await fetch('http://localhost:8000/api/forgot-password', {\n                method: 'POST',\n                credentials: 'include',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ email })\n            });\n\n            const data = await response.json();\n            if (response.ok) {\n                setLoading(false);\n                setMessage(data.message);\n                startCountdown();\n\n            } if (response.status === 429) {\n                setErrors({ email: response.statusText, });\n\n            } else {\n                // If the response contains field-specific errors\n                if (data.errors && data.errors.email) {\n                    setErrors({ email: data.errors.email });\n                } else {\n                    // General error message\n                    setMessage(data.message || 'Error occurred');\n                }\n            }\n        } catch (error) {\n            setLoading(false);\n            // Handle network or other errors here\n            setErrors({ message: error.message });\n\n        }\n        finally {\n            setLoading(false);\n\n        }\n    };\n\n\n    const styles = {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        width: '300px',\n        height: '410px',\n        backgroundColor: 'white',\n        bgcolor: 'background.paper',\n\n\n        borderRadius: '5px',\n        border: '0.1px solid black',\n    }\n    return (\n\n        <div style={styles}>\n\n            <Typography sx={{ backgroundColor: '#0F75E0', padding: 2, color: 'white', pb: 2 }} variant=\"h5\" align=\"center\" >\n                {type === 'change' ? ('Reset Password') : (' Forgot Password')}\n            </Typography>\n            <IconButton style={{ transform: 'translate(240px, -60px)', color: '#282F48' }} onClick={() => close(false)}>\n\n\n                {/* CLOSE ICON */}\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill='white' height=\"40\" width=\"40\"><path d=\"m10.458 31.458-1.916-1.916 9.5-9.542-9.5-9.542 1.916-1.916 9.542 9.5 9.542-9.5 1.916 1.916-9.5 9.542 9.5 9.542-1.916 1.916-9.542-9.5Z\" /></svg>\n\n\n\n            </IconButton>\n            <div >\n            </div>\n            <Typography mb={4} mt={{ sm: -3, md: 0 }} textAlign='center' variant=\"body2\">Send a link to reset  <br />  your password</Typography>\n            <div style={{ padding: 10 }}>\n                <TextField\n                    id=\"email-reset\"\n                    type=\"email\"\n                    autoComplete=\"email\"\n                    label=\"Email Address\"\n                    disabled={type === 'change' ? true : false}\n                    //fill with reset email if type === change\n\n                    value={type === 'change' ? resetEmail : email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    required\n                    fullWidth\n                    error={!!errors.email}\n                    helperText={errors.email || ''}\n                    name=\"email\"\n                />\n                {message && <h3 style={{ textAlign: 'center', color: '#30842E', marginTop: '5px' }}>{message}!</h3>}\n                <Button\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                    fullWidth\n                    onClick={handleSubmit}\n                    disabled={isButtonDisabled || loading}\n                    type=\"submit\"\n                    sx={{ mt: 8, height: '50px' }}\n                >\n                    {loading ? (\n                        <CircularProgress size={24} />\n                    ) : isButtonDisabled ? (\n                        `Resend Link (${countdown})`\n                    ) : (\n                        'Send Link'\n                    )}\n                </Button>\n\n\n            </div>\n        </div>\n\n    );\n};\n\n\n\nexport default ForgotPassword\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\nimport {\n    Paper,\n    Typography,\n    Box,\n    Button,\n    TextField,\n    Grid,\n    CircularProgress,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n    Modal,\n    Divider,\n} from '@mui/material';\nimport { useAuth } from '../components/Utilities/useAuth';\nimport ForgotPassword from '../components/ForgotPassword';\n\nconst AccountDetails = () => {\n    useEffect(() => {\n        document.title = \"Your Account Details - Herba Natural User Profile\";\n        document.querySelector('meta[name=\"description\"]').setAttribute(\"content\", \"Manage your Herba Natural account details. Update personal information, track orders, and customize your CBD shopping experience.\");\n    }, []);\n\n\n\n    const { deleteUser } = useAuth();\n    const [customer, setCustomer] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [loadingPage, setLoadingPage] = useState(false);\n    const [errors, setErrors] = useState({});\n    const [isFormChanged, setIsFormChanged] = useState(false);\n    const navigate = useNavigate();\n    const [openDialog, setOpenDialog] = useState(false);\n    const [forgotPasswordOpen, setForgotPasswordOpen] = useState(false);\n    const [countdown, setCountdown] = useState(30);\n    const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n    const startCountdown = () => {\n        setIsButtonDisabled(true);\n        setCountdown(30);\n\n        const interval = setInterval(() => {\n            setCountdown((currentCountdown) => {\n                if (currentCountdown <= 1) {\n                    clearInterval(interval);\n                    setIsButtonDisabled(false);\n                    return 0;\n                }\n                return currentCountdown - 1;\n            });\n        }, 1000);\n    };\n\n    // Call startCountdown in handleSubmit on successful send\n\n\n\n\n\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (!token) {\n            navigate('/login');\n        } else {\n            const decodedToken = jwtDecode(token);\n            const userId = decodedToken.customerId;\n            fetchCustomerData(userId);\n        }\n\n    }, [navigate]);\n\n\n    const fetchOrders = async (orderIds) => {\n        const orders = await Promise.all(orderIds.map(orderId =>\n            fetch(`http://localhost:8000/api/order/${orderId}`, { credentials: 'include' })\n                .then(response => response.json())\n                .catch(error => {\n                    console.error('Error fetching order:', orderId, error)\n\n                })\n        ));\n        return orders.filter(order => order != null); // Filter out any failed requests\n    };\n\n    const fetchCustomerData = async (userId) => {\n        setLoadingPage(true);\n        try {\n            const response = await fetch(`http://localhost:8000/api/customer/${userId}`, { credentials: 'include' });\n            if (!response.ok) throw new Error('Network response was not ok');\n\n            const customerData = await response.json();\n            setCustomer(customerData);\n\n            // Fetch orders if they exist\n            if (customerData.orders && customerData.orders.length > 0) {\n                const orders = await fetchOrders(customerData.orders);\n                setCustomer(prev => ({ ...prev, orders })); // Append orders to customer state\n            }\n        } catch (error) {\n            console.error('Error fetching customer data:', error);\n        } finally {\n            setLoadingPage(false);\n        }\n    };\n\n\n\n    const handleChange = (e) => {\n        setCustomer({ ...customer, [e.target.name]: e.target.value });\n        setIsFormChanged(true);\n    };\n\n\n\n\n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n        setErrors({}); // Clear any previous error\n        setLoading(true)\n\n        try {\n            const response = await fetch(`http://localhost:8000/api/customer/${customer._id}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n\n                },\n                credentials: 'include',\n                body: JSON.stringify(customer),\n            });\n\n            if (!response.ok) {\n                const errorData = await response.json(); // Try to parse the error response\n                console.error('Error updating customer data:', errorData);\n\n                // Handle validation errors here\n                if (errorData.message === 'Validation error' && errorData.error) {\n                    const validationErrors = {};\n                    Object.keys(errorData.error.errors).forEach((fieldName) => {\n\n                        console.error(`Validation error for ${fieldName}: ${errorData.error.errors[fieldName].message}`);\n\n                        validationErrors[fieldName] = errorData.error.errors[fieldName].message;\n                    });\n                    setErrors(validationErrors);\n                    setLoading(false)\n                }\n            } else {\n                const data = await response.json();\n\n                setCustomer(data);\n                setLoading(false)\n                setIsFormChanged(false);\n                window.alert('Account Succssfully Updated!')\n\n            }\n        } catch (error) {\n            console.error('Unknown error occurred:', error);\n        }\n        finally {\n            setLoading(false)\n\n        }\n    };\n\n\n\n\n    const handleDeleteAccount = () => {\n\n        fetch(`http://localhost:8000/api/customer/${customer._id}`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n\n            },\n            credentials: 'include',\n        })\n            .then(async response => {\n                if (!response.ok) {\n                    throw new Error('Error deleting account');\n                }\n                await deleteUser();\n                navigate('/');\n            })\n            .catch(error => console.error('Error:', error));\n    };\n\n    const handleOpenDialog = () => {\n        setOpenDialog(true);\n    };\n\n    const handleCloseDialog = () => {\n        setOpenDialog(false);\n    };\n\n    const renderOrderItem = (item) => (\n        <Grid container key={item} spacing={1} sx={{ marginBottom: 1 }}>\n            <Grid item xs={3}>\n                <img src={item.img} alt={item.name} style={{ width: '100%', height: 'auto' }} />\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant=\"subtitle2\">{item.name}</Typography>\n                <Typography variant=\"body2\">Price: ${item.price ? item.price.toFixed(2) : 'N/A'}</Typography>\n                <Typography variant=\"body2\">Quantity: {item.quantity || 'N/A'}</Typography>\n            </Grid>\n        </Grid>\n    );\n\n    const renderOrders = () => {\n        return customer && customer.orders && customer.orders.length > 0 ? (\n\n            customer.orders.map((order, index) => (\n                <Paper key={index} sx={{ padding: 2, marginBottom: 3, width: '100%' }} >\n                    <Typography variant=\"h6\">Order #{order.orderNumber}</Typography>\n                    <Typography variant=\"body2\">Order Date: {order.orderDate ? new Date(order.orderDate).toLocaleDateString() : 'N/A'}</Typography>\n                    <Typography variant=\"body2\">Total Amount: ${order.totalAmount ? order.totalAmount.grandTotal.toFixed(2) : 'N/A'}</Typography>\n                    <Typography variant=\"body2\">Order Status: {order?.orderStatus || 'Unknown'}</Typography>\n                    <Typography variant=\"body2\">Payment Status: {order?.paymentStatus || 'N/A'}</Typography>\n                    <Divider sx={{ my: 2 }} />\n                    {order.shippingMethod && (\n                        <>\n                            <Typography variant=\"body2\">Shipping Carrier: {order.shippingMethod?.carrier || 'N/A'}</Typography>\n                            <Typography variant=\"body2\">Shipping To: {order.address || 'N/A'}</Typography>\n                            <Typography variant=\"body2\">Tracking Number: {order.shippingMethod?.trackingNumber || 'N/A'}</Typography>\n                            <Typography variant=\"body2\">Track Your Package: <a href={order.shippingMethod?.trackingUrl || '#'}>Here</a></Typography>\n                        </>\n                    )}\n                    <Divider sx={{ my: 2 }} />\n                    {order.products && order.products.length > 0 ? (\n                        order.products.map((item, idx) => renderOrderItem(item))\n                    ) : (\n                        <Typography variant=\"body2\">No products in this order.</Typography>\n                    )}\n                    <Divider sx={{ my: 2 }} />\n\n\n                    {order.orderNotes && (\n                        <Typography variant=\"body2\">Notes: {order.orderNotes}</Typography>\n                    )}\n                </Paper>\n            ))\n        ) : (\n            <Typography variant=\"body2\">You have no orders.</Typography>\n        );\n    };\n\n\n\n    if (loadingPage) {\n        return (\n            <Paper sx={{ p: 2, maxWidth: 800, margin: '0 auto', marginTop: 4 }}>\n                <Typography variant=\"h5\" sx={{ marginBottom: 2 }}>\n                    Loading Account Details...\n                    <CircularProgress />\n                </Typography>\n\n            </Paper>\n        );\n    }\n\n    return (\n        <Paper sx={{ p: 4, maxWidth: 800, margin: '0px auto', marginTop: 5, marginBottom: 5 }}>\n            <Typography variant=\"h1\" component=\"h1\" sx={{ marginBottom: 2, fontSize: 'h5.fontSize' }}>\n                Account Details\n            </Typography>\n\n            <form onSubmit={handleFormSubmit}>\n                <Grid container spacing={2}>\n                    {/* Add more fields here */}\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            autoComplete=\"given-name\"\n                            name=\"firstName\"\n                            label=\"First Name\"\n                            fullWidth\n                            value={customer?.firstName || ''}\n                            onChange={handleChange}\n                            error={!!errors.firstName}\n                            helperText={errors.firstName}\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            label=\"Last Name\"\n                            fullWidth\n                            autoComplete=\"family-name\"\n                            name=\"lastName\"\n                            value={customer?.lastName || ''}\n                            onChange={handleChange}\n                            error={!!errors.lastName}\n                            helperText={errors.lastName}\n\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            label=\"Email\"\n                            fullWidth\n\n                            autoComplete=\"email\"\n                            type='email'\n                            id='email'\n                            name=\"email\"\n                            value={customer?.email || ''}\n                            onChange={handleChange}\n                            error={!!errors.email}\n                            helperText={errors.email ? errors.email :\n                                <span>\n                                    {/* information icon */}\n                                    <svg height='16' fill='#0F75E0' style={{ transform: 'translateY(3px)' }} viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22ZM12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20ZM11 7H13V9H11V7ZM11 11H13V17H11V11Z\" /></svg>\n                                    {' This will change the email associated with your account'}\n                                </span>\n                            }\n                        />\n                    </Grid>\n                    {/* Address Line 1 */}\n                    <Grid item xs={12}>\n                        <TextField\n                            label=\"Address\"\n                            fullWidth\n                            name=\"address1\"\n                            autoComplete=\"address-line1\"\n                            value={customer?.address || ''}\n                            onChange={handleChange}\n                        />\n                    </Grid>\n\n                    {/* Address Line 2 */}\n                    <Grid item xs={12}>\n                        <TextField\n                            label=\"Address Line 2\"\n                            fullWidth\n                            autoComplete=\"address-line2\"\n                            name=\"address2\"\n                            value={customer?.address2 || ''}\n                            onChange={handleChange}\n                        />\n                    </Grid>\n\n                    {/* City */}\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            label=\"City\"\n                            fullWidth\n                            name=\"city\"\n                            autoComplete=\"address-level2\"\n                            value={customer?.city || ''}\n                            onChange={handleChange}\n                        />\n                    </Grid>\n\n                    {/* State */}\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            label=\"State\"\n                            fullWidth\n                            name=\"state\"\n                            autoComplete=\"address-level1\"\n                            value={customer?.state || ''}\n                            onChange={handleChange}\n                        />\n                    </Grid>\n\n                    {/* Zip Code */}\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            label=\"Zip\"\n                            fullWidth\n                            name=\"zip\"\n                            autoComplete=\"postal-code\"\n                            value={customer?.zip || ''}\n                            onChange={handleChange}\n                        />\n                    </Grid>\n\n                    {/* Phone Number */}\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            label=\"Phone\"\n                            fullWidth\n                            name=\"phone\"\n                            type=\"tel\"\n                            autoComplete=\"tel\"\n                            value={customer?.phone || ''}\n                            onChange={handleChange}\n                        />\n                    </Grid>\n\n                    {/* Country */}\n                    <Grid item xs={12}>\n                        <TextField\n                            autoComplete=\"country-name\"\n                            label=\"Country\"\n                            fullWidth\n                            name=\"country\"\n                            value={customer?.country || ''}\n                            onChange={handleChange}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n\n                        <Typography variant=\"body2\" align=\"center\" mt={2}>\n                            <Button\n                                type='button'\n                                onClick={() => setForgotPasswordOpen(true)}\n                                color=\"primary\"\n                            >\n                                Change your password?\n                            </Button>\n                        </Typography>\n                        <Box sx={{ marginTop: 2, height: '90px', display: 'flex', justifyContent: 'space-between', alignItems: 'center', flexDirection: { xs: 'column', sm: 'row' } }}>\n                            <Button\n                                style={{ width: '210px' }}\n                                disabled={loading || !isFormChanged}\n                                variant=\"contained\"\n                                color=\"primary\"\n                                type=\"submit\"\n                            >\n                                {loading ? <CircularProgress size={24} /> : 'Save Changes'}\n                            </Button>\n                            <Button\n                                style={{ width: '210px' }}\n                                variant=\"contained\"\n                                color=\"error\"\n                                onClick={handleOpenDialog}\n\n                            >\n                                Delete Account\n                            </Button>\n                        </Box>\n                        <Modal\n                            open={forgotPasswordOpen}\n                            onClose={() => setForgotPasswordOpen(false)}\n                            aria-labelledby=\"forgot-password-modal\"\n                            aria-describedby=\"forgot-password-form\"\n\n                        >\n                            <div >\n                                <ForgotPassword\n                                    close={setForgotPasswordOpen}\n                                    type={'change'}\n                                    resetEmail={customer?.email}\n                                    startCountdown={startCountdown}\n                                    isButtonDisabled={isButtonDisabled}\n                                    countdown={countdown}\n\n                                />\n                            </div>\n                        </Modal>\n                        <Typography variant=\"h1\" component=\"h1\" sx={{ marginBottom: 2, fontSize: 'h5.fontSize', mt: 10 }}>\n                            Your Orders\n                        </Typography>\n\n                    </Grid>\n\n                    {renderOrders()}\n                </Grid>\n\n            </form>\n            <Dialog\n                open={openDialog}\n                onClose={handleCloseDialog}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"Delete Your Account?\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        Are you sure you want to delete your account? This action cannot be undone.\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleCloseDialog} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleDeleteAccount} color=\"primary\" autoFocus>\n                        Confirm\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Paper>\n    );\n}\n\nexport default AccountDetails;"],"names":["_ref","close","type","resetEmail","startCountdown","countdown","isButtonDisabled","email","setEmail","useState","message","setMessage","loading","setLoading","errors","setErrors","_jsxs","style","position","top","left","transform","width","height","backgroundColor","bgcolor","borderRadius","border","children","_jsx","Typography","sx","padding","color","pb","variant","align","IconButton","onClick","xmlns","fill","d","mb","mt","sm","md","textAlign","TextField","id","autoComplete","label","disabled","value","onChange","e","target","required","fullWidth","error","helperText","name","marginTop","Button","async","trim","test","preventDefault","response","fetch","method","credentials","headers","body","JSON","stringify","data","json","ok","status","statusText","CircularProgress","size","concat","AccountDetails","useEffect","document","title","querySelector","setAttribute","deleteUser","useAuth","customer","setCustomer","loadingPage","setLoadingPage","isFormChanged","setIsFormChanged","navigate","useNavigate","openDialog","setOpenDialog","forgotPasswordOpen","setForgotPasswordOpen","setCountdown","setIsButtonDisabled","token","localStorage","getItem","userId","jwtDecode","customerId","fetchCustomerData","Error","customerData","orders","length","Promise","all","orderIds","map","orderId","then","catch","console","filter","order","fetchOrders","prev","handleChange","handleCloseDialog","Paper","p","maxWidth","margin","marginBottom","component","fontSize","onSubmit","event","_id","window","alert","errorData","validationErrors","Object","keys","forEach","fieldName","Grid","container","spacing","item","xs","firstName","lastName","viewBox","address","address2","city","state","zip","phone","country","Box","display","justifyContent","alignItems","flexDirection","handleOpenDialog","Modal","open","onClose","ForgotPassword","interval","setInterval","currentCountdown","clearInterval","index","_order$shippingMethod","_order$shippingMethod2","_order$shippingMethod3","orderNumber","orderDate","Date","toLocaleDateString","totalAmount","grandTotal","toFixed","orderStatus","paymentStatus","Divider","my","shippingMethod","_Fragment","carrier","trackingNumber","href","trackingUrl","products","idx","src","img","alt","price","quantity","renderOrderItem","orderNotes","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","handleDeleteAccount","autoFocus"],"sourceRoot":""}