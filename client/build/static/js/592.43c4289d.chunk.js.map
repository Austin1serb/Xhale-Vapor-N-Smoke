{"version":3,"file":"static/js/592.43c4289d.chunk.js","mappings":"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","sources":["components/CategoryInput.jsx","models/ImageUpload.jsx","models/StrengthFeaturedControl.jsx","components/SeoKeywordsInput.jsx","models/SEOSection.jsx","models/ShippingInput.jsx","models/AddProductModal.jsx","components/DetailsView.jsx","components/ProductList.jsx","models/EditCustomerModal.jsx","components/UserList.jsx","components/OrderDetails.jsx","components/OrderList.jsx","components/SalesOverview.jsx","pages/AdminDashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    TextField,\n    Button,\n    Box,\n    FormControl,\n    FormLabel,\n    Chip,\n    Typography,\n} from '@mui/material';\n\nconst CategoryInput = ({ category, onAddCategory, onRemoveCategory, error }) => {\n    const [newCategory, setNewCategory] = useState('');\n    const [localError, setLocalError] = useState(error);\n\n    const handleAddCategory = () => {\n        if (newCategory.trim() !== '') {\n            // Convert the new category to lowercase and remove leading/trailing spaces\n            const formattedCategory = newCategory.trim().toLowerCase();\n\n            // Check if the category already exists in the list\n            if (!category.includes(formattedCategory)) {\n                onAddCategory(formattedCategory);\n                setLocalError(null); // Clear the local error state when a new category is successfully added\n            } else {\n                setLocalError('Category already exists');\n            }\n\n            setNewCategory('');\n        } else {\n            setLocalError('Category name cannot be empty');\n        }\n    };\n\n    useEffect(() => {\n        // Update the local error state when the error prop changes\n        setLocalError(error);\n    }, [error]);\n\n    return (\n        <FormControl\n            sx={{\n\n                width: '97%',\n                pl: 1,\n                py: 1,\n                pr: 1,\n                border: 1,\n                borderRadius: 1,\n                borderColor: localError ? (theme) => theme.palette.error.main : 'black',\n                '&:hover': {\n                    borderColor: localError ? (theme) => theme.palette.error.main : '#1776D1',\n                    '& .form-label-sx': {\n                        color: localError ? (theme) => theme.palette.error.main : '#1776D1',\n                        fontSize: '14px',\n                        transition: 'color 0.4s, font-size 0.4s',\n                    },\n                },\n                '&:not(:hover)': {\n                    '& .form-label-sx': {\n                        color: localError ? (theme) => theme.palette.error.main : 'initial',\n                        fontSize: 'initial',\n                        transition: 'color 0.4s, font-size 0.4s',\n                    },\n                },\n            }}\n            name='category-input'\n            component=\"fieldset\"\n        >\n            <FormLabel\n                name='category-input'\n\n                id=\"category-input\"\n\n                component=\"legend\"\n                className=\"form-label-sx\"\n                sx={{\n                    fontSize: 16,\n                }}\n            >\n                Add product categories.*\n            </FormLabel>\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <TextField\n                    name='categories'\n                    spellCheck={true}\n                    label=\"Categories*\"\n                    value={newCategory}\n                    error={Boolean(localError)}\n                    onChange={(e) => setNewCategory(e.target.value)}\n                />\n                <Button\n                    sx={{ fontSize: 10, m: 2 }}\n                    variant=\"outlined\"\n                    color={localError ? 'error' : 'primary'}\n                    onClick={handleAddCategory}\n                >\n                    Add\n                </Button>\n            </Box>\n            <Box>\n                {category.map((category, index) => (\n                    <Chip\n                        sx={{\n                            m: 1,\n                            '&:hover': {\n                                borderColor: 'red',\n                            },\n                        }}\n                        size=\"small\"\n                        key={index}\n                        label={category}\n                        onDelete={() => onRemoveCategory(category)}\n                        color=\"secondary\"\n                        variant=\"outlined\"\n                    />\n                ))}\n                <Typography variant=\"caption\" color=\"error\">\n                    {localError}\n                </Typography>\n            </Box>\n        </FormControl>\n    );\n};\n\nexport default CategoryInput;\n","// ImageUpload.js\n\nimport React from 'react';\nimport {\n    FormControl, FormLabel, Box, Button,\n    Typography, CircularProgress\n} from '@mui/material';\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\nimport { styled } from '@mui/material/styles';\nconst ImageUpload = ({\n    error,\n    loading,\n    selectedImage,\n    selectedImageData,\n    handleImage,\n    setSelectedImageData\n}) => {\n\n    const handleRemoveImage = (indexToRemove) => {\n        const newImages = selectedImageData.filter((_, index) => index !== indexToRemove);\n        setSelectedImageData(newImages);\n    };\n\n\n    const imageContainerStyles = {\n        display: 'inline-flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        margin: '5px'\n    };\n\n    // Styles for the image thumbnail container\n    const thumbnailContainerStyles = {\n        display: 'flex',\n        overflowX: 'auto', // Adds horizontal scroll if content exceeds container width\n        gap: '10px', // Spacing between image containers\n    };\n    const VisuallyHiddenInput = styled('input')({\n        clip: 'rect(0 0 0 0)',\n        clipPath: 'inset(50%)',\n        height: 1,\n        overflow: 'hidden',\n        position: 'absolute',\n        bottom: 0,\n        left: 0,\n        whiteSpace: 'nowrap',\n        width: 1,\n    });\n\n\n    return (\n        <FormControl\n            sx={{\n                width: '97%',\n                fontSize: 8,\n                my: 2,\n                pl: 1,\n                py: 1,\n                pr: 1,\n                border: 1,\n                borderRadius: 1,\n                // Apply MUI error color to border when there is an error\n                borderColor: error['imgSource'] ? theme => theme.palette.error.main : 'black',\n                '&:hover': {\n                    borderColor: error['imgSource'] ? theme => theme.palette.error.main : '#1776D1',\n                    '& .MuiFormLabel-root': {\n                        // Apply MUI error color to title when there is an error\n                        color: error['imgSource'] ? theme => theme.palette.error.main : '#1776D1',\n                        fontSize: '14px',\n                        transition: 'color 0.4s, font-size 0.4s',\n                    },\n                },\n                ' &:not(:hover)': {\n                    '& .MuiFormLabel-root': {\n                        // Apply MUI error color to title when there is an error\n                        color: error['imgSource'] ? theme => theme.palette.error.main : 'initial',\n                        fontSize: 'inital',\n                        transition: 'color 0.4s, font-size 0.4s',\n                    },\n                },\n            }}\n            component=\"fieldset\"\n        >\n            <FormLabel component=\"legend\"\n                sx={{\n                    fontSize: 16,\n                    pr: 0.5,\n                    pl: .5,\n                    // Apply MUI error color to title when there is an error\n                    color: error['imgSource'] ? theme => theme.palette.error.main : 'initial',\n                }}\n            > Upload an image*</FormLabel>\n            <Box>\n                <Button accept=\"image/*\"\n\n                    id=\"image-upload\"\n                    component=\"label\"\n                    variant=\"outlined\"\n                    startIcon={<CloudUploadIcon />}\n\n                    // Apply MUI error color to button when there is an error\n                    sx={{\n                        my: 1\n                    }}\n                    color={error['imgSource'] ? 'error' : 'primary'}\n                    disabled={loading || (selectedImageData && selectedImageData.length >= 5)} // Disable button if 5 or more images are uploaded\n                >\n                    {loading ? ( // Display CircularProgress while loading\n                        <CircularProgress size={24} color=\"inherit\" />\n                    ) : (\n                        'Add image'\n                    )}\n                    <VisuallyHiddenInput accept=\"image/*\"\n                        id=\"image-upload\" type=\"file\" multiple onChange={handleImage}\n                    />\n                </Button>\n                {/* Displaying max limit message */}\n                {(selectedImageData && selectedImageData.length >= 5) &&\n                    <Typography variant='caption' sx={{ ml: 1.2 }} color=\"textSecondary\">\n                        Max 5 photos\n                    </Typography>\n                }\n                {selectedImage ? (\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                        Selected image(s): {selectedImage.name}\n                    </Typography>\n                ) : (\n                    <Box>\n                        <Typography variant=\"body2\" color=\"textSecondary\">Uploaded Image(s)</Typography>\n                    </Box>\n                )}\n\n                {error['imgSource'] && (\n                    <Typography variant='caption' sx={{ ml: 1.2 }} color=\"error\">\n                        {error['imgSource']}\n                    </Typography>\n                )}\n                <Box sx={thumbnailContainerStyles}>\n                    {selectedImageData && selectedImageData.length > 0 ? (\n                        selectedImageData.map((imgUrl, index) => (\n                            <div key={index} style={imageContainerStyles}>\n                                <img\n                                    src={imgUrl}\n                                    alt={`Selected Thumbnail ${index + 1}`}\n                                    style={{ maxWidth: '100px', maxHeight: '100px', minWidth: '100px', minHeight: '100px', border: '.5px solid black', }}\n                                    loading='lazy'\n                                />\n                                <Button\n                                    size=\"small\"\n                                    variant=\"text\"\n\n                                    onClick={() => handleRemoveImage(index)}\n                                    sx={{ marginTop: '5px' }}\n                                >\n                                    Remove\n                                </Button>\n                            </div>\n                        ))\n                    ) : (\n                        <Typography sx={{ m: 1 }} variant='caption' color=\"textSecondary\">\n                            Preview will appear here after selecting an image.\n                        </Typography>\n                    )}\n                </Box>\n\n\n            </Box>\n        </FormControl>\n\n    );\n}\n\nexport default ImageUpload;\n","// StrengthFeaturedControl.js\n\nimport React from 'react';\nimport {\n    Box, FormControl, FormLabel, RadioGroup,\n    FormControlLabel, Radio, Typography\n} from '@mui/material';\n\nconst StrengthFeaturedControl = ({\n    selectedStrength,\n    handleStrengthChange,\n    productData,\n    handleChange,\n    error\n}) => {\n    return (\n        <Box sx={{\n            display: 'flex', justifyContent: 'space-between', alignItems: 'center', flexDirection: {\n                sm: 'row',\n                xs: 'column',\n            },\n\n        }}>\n            <FormControl sx={{\n                my: 4,\n                pl: 1,\n                pb: 1,\n                border: 1,\n                borderRadius: 1,\n                borderColor: '#CACACA',\n                '&:hover': {\n                    borderColor: 'black',\n                    '& .form-label-sx': {\n                        color: '#1776D1',\n                        fontSize: '14px',\n                        transition: 'color 0.4s, font-size 0.4s',\n\n                    },\n                },\n                ' &:not(:hover)': {\n                    '& .form-label-sx': {\n                        color: 'initial', // Return the text color to its original state\n                        fontSize: 'inital',\n                        transition: 'color 0.4s, font-size 0.4s',\n                    },\n                },\n            }} component=\"fieldset\">\n                <FormLabel\n                    sx={{\n                        fontSize: 16,\n                        pr: 0.5,\n                        pl: .5,\n                    }}\n                    className='form-label-sx'\n                    component=\"legend\"\n                >Strength</FormLabel>\n                <RadioGroup\n                    row\n                    aria-label=\"strength\"\n                    name=\"strength\"\n                    value={selectedStrength}\n                    onChange={handleStrengthChange}\n                >\n                    <FormControlLabel\n                        value=\"low\"\n                        control={<Radio />}\n                        label=\"Low\"\n                    />\n                    <FormControlLabel\n                        value=\"medium\"\n                        control={<Radio />}\n                        label=\"Medium\"\n                    />\n                    <FormControlLabel\n                        value=\"high\"\n                        control={<Radio />}\n                        label=\"High\"\n                    />\n                </RadioGroup>\n                {error && (\n                    <Typography variant='caption' sx={{ ml: 1.2 }} color=\"error\">\n                        {error.strength}\n                    </Typography>\n                )}\n            </FormControl>\n            <Box sx={{ display: 'flex', justifyContent: 'end' }} >\n                <FormControl\n                    sx={{\n                        pl: 1,\n                        pr: 3,\n                        pb: 1,\n                        border: 1,\n                        borderRadius: 1,\n                        borderColor: '#CACACA',\n                        '&:hover': {\n                            borderColor: 'black',\n                            '& .form-label-sx': {\n                                color: '#1776D1',\n\n                                transition: 'color 0.4s',\n                                textAlign: 'center'\n                            },\n                        },\n                        ' &:not(:hover)': {\n                            '& .form-label-sx': {\n                                color: 'initial', // Return the text color to its original state\n\n                                transition: 'color 0.4s',\n\n                            },\n                        },\n                    }}\n                    component=\"fieldset\"\n                >\n                    <FormLabel sx={{\n                        fontSize: 16,\n\n                        pl: .5,\n\n\n                    }}\n                        className='form-label-sx' component=\"legend\">Feature on Home page?</FormLabel>\n                    <RadioGroup\n                        row\n                        aria-label=\"isFeatured\"\n                        name=\"isFeatured\"\n                        value={Boolean(productData.isFeatured)} // Use the actual Boolean value\n                        onChange={handleChange}\n                    >\n                        <FormControlLabel\n                            value={Boolean(true)}\n                            control={<Radio />}\n                            label=\"Yes\"\n                        />\n                        <FormControlLabel\n                            value={Boolean(false)}\n                            control={<Radio />}\n                            label=\"No\"\n                        />\n                    </RadioGroup>\n                </FormControl>\n            </Box>\n        </Box>\n\n    );\n}\n\nexport default StrengthFeaturedControl;\n","import React, { useState } from 'react';\nimport {\n    TextField,\n    Button,\n    Box,\n    FormControl,\n    FormLabel,\n    Chip,\n} from '@mui/material';\n\nconst SeoKeywordsInput = ({ seoKeywords, onAddKeyword, onRemoveKeyword }) => {\n    const [newKeyword, setNewKeyword] = useState('');\n\n    const handleAddKeyword = () => {\n        if (newKeyword.trim() !== '') {\n            const formattedKeyword = newKeyword.trim().toLowerCase();\n            if (!seoKeywords.includes(formattedKeyword)) {\n                onAddKeyword(formattedKeyword);\n            }\n\n            setNewKeyword('');\n        }\n    };\n\n    return (\n        <FormControl\n            sx={{\n                width: '97%',\n                pl: 1,\n                py: 1,\n                pr: 1,\n                border: 1,\n                borderRadius: 1,\n                borderColor: '#CACACA',\n                '&:hover': {\n                    borderColor: 'black',\n                    '& .form-label-sx1': {\n                        color: '#1776D1',\n                        fontSize: '14px',\n                        transition: 'color 0.4s, font-size 0.4s',\n\n                    },\n                },\n                ' &:not(:hover)': {\n                    '& .form-label-sx1': {\n                        color: 'initial', // Return the text color to its original state\n                        fontSize: 'inital',\n                        transition: 'color 0.4s, font-size 0.4s',\n                    },\n                },\n            }}\n            component=\"fieldset\"\n        >\n            <FormLabel\n                className=\"form-label-sx1\"\n                sx={{\n                    fontSize: 16,\n\n                }}\n                component=\"legend\">Add SEO keywords.</FormLabel>\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <TextField\n                    spellCheck={true}\n                    label=\"Keywords\"\n                    name='keywords'\n                    value={newKeyword}\n                    onChange={(e) => setNewKeyword(e.target.value)}\n                />\n                <Button\n                    sx={{ fontSize: 10, m: 2 }}\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    onClick={handleAddKeyword}\n                >\n                    Add\n                </Button>\n            </Box>\n            <Box>\n                {seoKeywords.map((seoKeyword, index) => (\n                    <Chip\n                        sx={{\n                            m: 1,\n                            '&:hover': {\n                                borderColor: 'red',\n                            },\n                        }}\n                        size=\"small\"\n                        key={index}\n                        label={seoKeyword}\n                        onDelete={() => onRemoveKeyword(seoKeyword)}\n                        color=\"secondary\"\n                        variant=\"outlined\"\n                    />\n                ))}\n            </Box>\n        </FormControl>\n    );\n};\n\nexport default SeoKeywordsInput;\n","// SEOSection.js\n\nimport React from 'react';\nimport { FormControl, FormLabel, Box, TextField } from '@mui/material';\nimport SeoKeywordsInput from '../components/SeoKeywordsInput';  // Adjust the path accordingly\n\nconst SEOSection = ({ productData, handleChange, handleAddKeyword, handleRemoveKeyword }) => {\n    return (\n        <FormControl\n\n            sx={{\n                width: '97%',\n                my: 2,\n                pl: 1,\n                py: 1,\n                pr: 1,\n                border: 1,\n                borderRadius: 1,\n                borderColor: '#CACACA',\n                '&:hover': {\n                    borderColor: 'black',\n                    '& .form-label-sx': {\n                        color: '#1776D1',\n                        fontSize: '14px',\n                        transition: 'color 0.4s, font-size 0.4s',\n\n                    },\n                },\n                ' &:not(:hover)': {\n                    '& .form-label-sx': {\n                        color: 'initial', // Return the text color to its original state\n                        fontSize: 'inital',\n                        transition: 'color 0.4s, font-size 0.4s',\n                    },\n                },\n            }}\n            component=\"fieldset\"\n        >\n            <FormLabel\n                className='form-label-sx'\n                component=\"legend\">   Search Engine Optimization (Optional)</FormLabel>\n            <Box sx={{}} >\n                {/*<Typography variant=\"body2\" sx={{ mt: 2, ml: '25%' }}>\n                            Search Engine Optimization (Optional)\n                        </Typography>*/}\n\n                <TextField\n                    sx={{ my: 2 }}\n                    name=\"seo.title\"\n                    label=\"SEO Title\"\n                    fullWidth\n                    value={productData.seo['title'] ? productData.seo['title'] : ''}\n\n                    onChange={handleChange}\n                />\n                <TextField\n                    sx={{ my: 2 }}\n                    name=\"seo.description\"\n                    label=\"SEO Description\"\n                    fullWidth\n                    multiline\n                    rows={2}\n                    value={productData.seo['description']}\n                    onChange={handleChange}\n                />\n\n                {/* SEO Keywords Input Component */}\n                <SeoKeywordsInput\n                    seoKeywords={productData.seoKeywords}\n                    onAddKeyword={handleAddKeyword}\n                    onRemoveKeyword={handleRemoveKeyword}\n                />\n\n            </Box>\n        </FormControl>\n    );\n}\n\nexport default SEOSection;\n","// ShippingInput.js\n\nimport React from 'react';\nimport { FormControl, FormLabel, Box, TextField } from '@mui/material';\n\nconst ShippingInput = ({ weight, length, width, height, handleChange }) => {\n    return (\n        <FormControl\n\n            sx={{\n                width: '97%',\n\n                pl: 1,\n                py: 1,\n                pr: 1,\n                border: 1,\n                borderRadius: 1,\n                borderColor: '#CACACA',\n                '&:hover': {\n                    borderColor: 'black',\n                    '& .form-label-sx': {\n                        color: '#1776D1',\n                        fontSize: '14px',\n                        transition: 'color 0.4s, font-size 0.4s',\n\n                    },\n                },\n                ' &:not(:hover)': {\n                    '& .form-label-sx': {\n                        color: 'initial', // Return the text color to its original state\n                        fontSize: 'inital',\n                        transition: 'color 0.4s, font-size 0.4s',\n                    },\n                },\n            }}\n            component=\"fieldset\"\n        >\n            <FormLabel\n                className=\"form-label-sx\"\n                sx={{\n                    fontSize: 16,\n\n                }}\n                component=\"legend\">Shipping Details (Optional).</FormLabel>\n            <Box sx={{\n                display: 'flex', alignItems: 'center', flexDirection: {\n                    sm: 'row',\n                    xs: 'column',\n                },\n            }} >\n                <TextField\n                    sx={{ my: 2 }}\n                    name=\"shipping.weight\"\n                    label=\"Weight (oz)\"\n                    type=\"number\"\n                    fullWidth\n                    value={weight}\n                    onChange={handleChange}\n                />\n                <TextField\n                    sx={{ my: 2 }}\n                    name=\"shipping.dimensions.length\"\n                    label=\"Length (in)\"\n                    type=\"number\"\n                    fullWidth\n                    value={length}\n                    onChange={handleChange}\n                />\n                <TextField\n                    sx={{ my: 2 }}\n                    name=\"shipping.dimensions.width\"\n                    label=\"Width (in)\"\n                    type=\"number\"\n                    fullWidth\n                    value={width}\n                    onChange={handleChange}\n                />\n                <TextField\n                    sx={{ my: 2 }}\n                    name=\"shipping.dimensions.height\"\n                    label=\"Height (in)\"\n                    type=\"number\"\n                    fullWidth\n                    value={height}\n                    onChange={handleChange}\n                />\n            </Box>\n        </FormControl>\n    );\n}\n\nexport default ShippingInput;\n","\nimport React, { useEffect, useState } from 'react';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    TextField,\n\n    CircularProgress,\n\n} from '@mui/material';\nimport CategoryInput from '../components/CategoryInput';\nimport ImageUpload from './ImageUpload';\nimport StrengthFeaturedControl from './StrengthFeaturedControl';\nimport SEOSection from './SEOSection';\nimport ShippingInput from './ShippingInput';\n\nconst initialProductData = {\n    brand: '',\n    name: '',\n    price: '',\n    specs: '',\n    totalSold: 0,\n    imgSource: [],\n    category: [],\n    description: '',\n    strength: 'low',\n    isFeatured: false,\n    flavor: '',\n    seo: {\n        title: '',\n        description: '',\n    },\n    seoKeywords: [],\n    shipping: {\n        weight: 0,\n        dimensions: {\n            length: 0,\n            width: 0,\n            height: 0,\n        },\n    },\n};\n\n\n\nconst AddProductModal = ({ open, onClose, onAddProduct, selectedProduct, onUpdateProduct, }) => {\n    const [productData, setProductData] = useState(selectedProduct || initialProductData);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState({});\n    const [selectedImage, setSelectedImage] = useState([]);\n    const [selectedImageData, setSelectedImageData] = useState([]);\n    const [selectedStrength, setSelectedStrength] = useState('low');\n    const [isNewImageSelected, setIsNewImageSelected] = useState(false);\n\n    const handleStrengthChange = (event) => {\n        const newStrength = event.target.value;\n        setSelectedStrength(newStrength);\n        setProductData({ ...productData, strength: newStrength });\n    };\n\n\n    const handleAddKeyword = (newKeyword) => {\n        setProductData({\n            ...productData,\n            seoKeywords: [...productData.seoKeywords, newKeyword],\n        });\n    };\n\n    const handleRemoveKeyword = (keyword) => {\n        const updatedKeywords = productData.seoKeywords.filter((kw) => kw !== keyword);\n        setProductData({\n            ...productData,\n            seoKeywords: updatedKeywords,\n        });\n    };\n\n\n    const clearForm = () => {\n        setProductData(initialProductData);\n        setError({});\n        setSelectedImage([]);\n        setSelectedImageData([]);\n        setSelectedStrength('low');\n        setLoading(false)\n    };\n\n\n    useEffect(() => {\n        setProductData((prevData) => ({\n            ...prevData,\n            imgSource: selectedImageData.map(urlOrObj => {\n                if (typeof urlOrObj === 'string') {\n                    const existingImageInfo = selectedProduct ? selectedProduct.imgSource.find(img => img.url === urlOrObj) : null;\n                    return {\n                        url: urlOrObj,\n                        publicId: existingImageInfo ? existingImageInfo.publicId : undefined\n                    };\n                }\n                return urlOrObj; // if it's already an object, just return as is\n            }),\n        }));\n    }, [selectedImageData, selectedProduct]);\n\n\n\n\n    useEffect(() => {\n        if (selectedProduct) {\n            setProductData(selectedProduct);\n            setSelectedStrength(selectedProduct.strength);\n\n            // Check if selectedProduct has an image source\n            if (selectedProduct.imgSource && selectedProduct.imgSource.length > 0) {\n                setSelectedImageData(selectedProduct.imgSource.map(imageObj => imageObj.url));\n            } else {\n                setSelectedImageData([]);\n            }\n\n\n        } else {\n            setProductData(initialProductData);\n            setSelectedImageData([]);\n        }\n    }, [selectedProduct]);\n\n\n\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n\n        if (name.startsWith('seo.')) {\n            const seoField = name.replace('seo.', ''); // Remove \"seo.\" from the field name\n            setProductData({\n                ...productData,\n                seo: {\n                    ...productData.seo,\n                    [seoField]: value,\n                },\n            });\n        }\n        else if (name.startsWith('shipping.')) {\n            // Check if it's shipping.weight or shipping.dimensions properties\n            if (name === 'shipping.weight') {\n                setProductData({\n                    ...productData,\n                    shipping: {\n                        ...productData.shipping,\n                        weight: value,\n                    },\n                });\n            } else if (name.startsWith('shipping.dimensions.')) {\n                const dimensionProp = name.replace('shipping.dimensions.', '');\n                setProductData({\n                    ...productData,\n                    shipping: {\n                        ...productData.shipping,\n                        dimensions: {\n                            ...productData.shipping.dimensions,\n                            [dimensionProp]: value,\n                        },\n                    },\n                });\n            }\n        } else if (name === 'category') {\n            const formattedCategory = value.toLowerCase().replace(/\\s/g, '');\n            setProductData({ ...productData, [name]: formattedCategory });\n        } else if (name === 'isFeatured') {\n            // Convert the value to a boolean\n            const isFeatured = value === 'true';\n            setProductData({ ...productData, [name]: isFeatured });\n\n        } else {\n            setProductData({ ...productData, [name]: value });\n        }\n    };\n\n\n\n\n\n\n    const API_URL = 'http://localhost:8000/api/product/';\n    const HEADERS = {\n        'Content-Type': 'application/json',\n    };\n\n\n    const handleAddProduct = async () => {\n        try {\n            setLoading(true);\n\n            const productToUpdate = prepareProductData();\n\n            const endpoint = selectedProduct ? `${API_URL}${selectedProduct._id}` : API_URL;\n            const method = selectedProduct ? 'PUT' : 'POST';\n\n            const response = await makeApiCall(endpoint, method, productToUpdate);\n\n            await handleApiResponse(response);\n        } catch (error) {\n            console.error('Error adding/updating product:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const prepareProductData = () => {\n        const productDataCopy = { ...productData, strength: selectedStrength };\n\n        const imageSource = selectedProduct ? formatImagesForUpdate() : formatImagesForNewProduct();\n        productDataCopy.imgSource = imageSource || [];\n\n        return productDataCopy;\n    };\n\n    const formatImagesForUpdate = () => {\n        if (Array.isArray(selectedImageData) && selectedImageData.length) {\n            return selectedImageData.map(url => {\n                const existingImageInfo = selectedProduct.imgSource.find(img => img.url === url);\n                return {\n                    url,\n                    publicId: existingImageInfo ? existingImageInfo.publicId : undefined\n                };\n            });\n        }\n    };\n\n    const formatImagesForNewProduct = () => {\n        if (Array.isArray(selectedImageData) && selectedImageData.length) {\n            return selectedImageData.map(url => ({ url }));\n        }\n    };\n\n    const makeApiCall = async (url, method, data) => {\n        return fetch(url, {\n            method,\n            headers: HEADERS,\n            credentials: 'include',\n            body: JSON.stringify(data),\n        });\n    };\n\n    const handleApiResponse = async (response) => {\n        if (response.ok) {\n            const product = await response.json();\n            if (selectedProduct) {\n                onUpdateProduct(product);\n            } else {\n                onAddProduct(product);\n            }\n            clearForm();\n            onClose();\n        } else {\n            const errorData = await response.json();\n            setError(errorData);\n            console.error('API error:', errorData.message || errorData);\n        }\n    };\n\n\n\n    // receive file from form\n    const handleImage = (e) => {\n        const files = Array.from(e.target.files); // Convert the FileList to an array\n        files.forEach(file => {\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onloadend = () => {\n                // Add the new image URL to selectedImageData\n                setSelectedImageData(prevImages => [...prevImages, reader.result]);\n            };\n        });\n        setSelectedImage(files);\n        setIsNewImageSelected(true);\n    };\n\n\n\n\n\n    const handleCancel = () => {\n        if (onClose) {\n            onClose();\n        }\n        clearForm();\n    }\n\n\n\n    // Function to handle adding a new category\n    const handleAddCategory = (newCategory) => {\n        setProductData({\n            ...productData,\n            category: [...productData.category, newCategory],\n        });\n    };\n\n    // Function to handle removing a category\n    const handleRemoveCategory = (category) => {\n        setProductData({\n            ...productData,\n            category: productData.category.filter((c) => c !== category),\n        });\n    };\n    const { shipping } = productData;\n    const weight = shipping?.weight || '';\n    const dimensions = shipping?.dimensions || {};\n    const length = dimensions.length || '';\n    const width = dimensions.width || '';\n    const height = dimensions.height || '';\n\n    const paperProps = {\n        style: {\n            borderRadius: '5px',\n        },\n    };\n\n    const buttonOptions = selectedProduct ? 'Save Changes' : 'Add Product'\n\n    return (\n        <Dialog open={open} onClose={onClose} PaperProps={paperProps}>\n\n            <DialogTitle\n                sx={{ backgroundColor: '#282F48', color: 'white', borderRadius: \"5px 5px 0px 0\" }}\n            >{selectedProduct ? 'Edit Product Details' : 'Add New Product'}</DialogTitle>\n\n            <DialogContent>\n\n                <DialogContentText sx={{ my: 2 }} >\n                    Please fill in the details of the new product.\n                </DialogContentText>\n\n                <DialogContentText variant='caption' sx={{ m: 2, color: '#D23030' }}>\n                    Fields with * are required.\n                </DialogContentText>\n\n                {loading && <CircularProgress />}\n\n                {/* Brand */}\n                <TextField\n                    sx={{ my: 2, }}\n                    name=\"brand\"\n                    label=\"Brand*\"\n                    fullWidth\n                    error={Boolean(error.brand)}\n                    helperText={error.brand}\n                    value={productData.brand}\n                    onChange={handleChange}\n                    autoComplete='true'\n                />\n\n                {/* Name */}\n                <TextField\n                    sx={{ my: 2 }}\n                    name=\"name\"\n                    label=\"Name*\"\n                    fullWidth\n                    error={Boolean(error.name)}\n                    helperText={error.name}\n                    value={productData.name}\n                    onChange={handleChange}\n                    autoComplete='true'\n                />\n\n                {/* Price */}\n                <TextField\n                    sx={{ my: 2 }}\n                    name=\"price\"\n                    label=\"Price*\"\n                    type=\"number\"\n                    fullWidth\n                    error={Boolean(error.price)}\n                    helperText={error.price}\n                    value={productData.price}\n                    onChange={handleChange}\n                    autoComplete='true'\n                />\n                {/* Specs */}\n                <TextField\n                    sx={{ my: 2 }}\n                    name=\"specs\"\n                    label=\"Specs*\"\n                    fullWidth\n                    error={Boolean(error.specs)}\n                    helperText={error.specs}\n                    value={productData.specs}\n                    onChange={handleChange}\n                    autoComplete='true'\n                />\n\n                {/* Description */}\n                <TextField\n                    sx={{ my: 2 }}\n                    name=\"description\"\n                    label=\"Description*\"\n                    multiline\n                    rows={4}\n                    fullWidth\n                    error={Boolean(error.description)}\n                    helperText={error.description}\n                    value={productData.description}\n                    onChange={handleChange}\n                    autoComplete='true'\n                />\n                {/* Flavor */}\n                <TextField\n                    sx={{ my: 2 }}\n                    name=\"flavor\"\n                    label=\"Flavor\"\n                    multiline\n                    rows={1}\n                    fullWidth\n                    value={productData.flavor}\n                    onChange={handleChange}\n                    autoComplete='true'\n                />\n                <TextField\n                    sx={{ my: 2 }}\n                    name=\"totalSold\"\n                    label=\"Units Sold\"\n                    multiline\n                    rows={1}\n                    fullWidth\n                    value={productData.totalSold}\n                    onChange={handleChange}\n                    autoComplete='true'\n                />\n                {/* Category Input Component */}\n                <CategoryInput\n                    category={productData.category}\n                    onAddCategory={handleAddCategory}\n                    onRemoveCategory={handleRemoveCategory}\n                    error={error && error.category}\n                />\n\n                {/* Image Upload */}\n                <ImageUpload\n                    error={error}\n                    loading={loading}\n                    selectedImage={selectedImage}\n                    selectedImageData={selectedImageData}\n                    handleImage={handleImage}\n                    setSelectedImageData={setSelectedImageData}\n                />\n\n\n\n\n\n\n\n\n\n                {/* Strength and Featured */}\n                <StrengthFeaturedControl\n                    selectedStrength={selectedStrength}\n                    handleStrengthChange={handleStrengthChange}\n                    productData={productData}\n                    handleChange={handleChange}\n                    error={error}\n                />\n\n\n\n                {/* SEO Section */}\n                <SEOSection\n                    productData={productData}\n                    handleChange={handleChange}\n                    handleAddKeyword={handleAddKeyword}\n                    handleRemoveKeyword={handleRemoveKeyword}\n                />\n\n                {/* SHIPPING INPUT */}\n                <ShippingInput\n                    weight={weight}\n                    length={length}\n                    width={width}\n                    height={height}\n                    handleChange={handleChange}\n                />\n\n                {/* Add more fields as needed */}\n            </DialogContent>\n            <DialogActions sx={{\n                display: 'flex', justifyContent: 'space-between', borderTop: 1, py: 2, borderColor: '#CACACA',\n                '&:hover': {\n                    borderColor: 'black',\n                },\n            }} >\n                <Button onClick={clearForm} variant='outlined' color=\"secondary\">\n                    Clear Form\n                </Button>\n                <Button onClick={handleCancel} variant='outlined' color=\"error\">\n                    Cancel\n                </Button>\n                <Button onClick={handleAddProduct} variant='outlined' color=\"primary\">\n                    {loading ? <CircularProgress /> : buttonOptions}\n                </Button>\n            </DialogActions>\n\n        </Dialog >\n    )\n};\n\nexport default AddProductModal;","import React from 'react';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    Button,\n    Typography,\n    Box,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableRow,\n    Paper,\n} from '@mui/material';\n\nconst paperProps = {\n    style: {\n        borderRadius: '6px', // Set the border radius to 6px\n    },\n};\n\nconst DetailsView = ({ open, product, onClose }) => {\n    return (\n        <Dialog open={open} onClose={onClose} PaperProps={paperProps}>\n            <DialogTitle sx={{ backgroundColor: '#283047', color: 'white', borderRadius: '5px 5px 0px 0' }}>\n                Product Details\n            </DialogTitle>\n            <DialogContent sx={{ backgroundColor: 'f5f5f5' }}>\n                <TableContainer component={Paper}>\n                    <Table>\n                        <TableBody>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>Product ID:</Typography>\n                                </TableCell>\n                                <TableCell  >{product._id}</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>Images:</Typography>\n                                </TableCell>\n                                <TableCell>    {product.imgSource && product.imgSource.map((image, index) => (\n                                    <img key={index} src={image.url}\n                                        alt={`${product.name} ${index}`} style={{ width: '100px', height: '100px', marginBottom: '1rem' }} loading='lazy' />\n                                ))}\n\n\n                                </TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>Brand:</Typography>\n                                </TableCell>\n                                <TableCell>{product.brand}</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>Name:</Typography>\n                                </TableCell>\n                                <TableCell>{product.name}</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>Price:</Typography>\n                                </TableCell>\n                                <TableCell>${product.price.toFixed(2)}</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>Specs:</Typography>\n                                </TableCell>\n                                <TableCell>{product.specs}</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>Category:</Typography>\n                                </TableCell>\n                                <TableCell>{product.category.join(', ')}</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>Description:</Typography>\n                                </TableCell>\n                                <TableCell>{product.description}</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>Flavor:</Typography>\n                                </TableCell>\n                                <TableCell>{product.flavor}</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>Strength:</Typography>\n                                </TableCell>\n                                <TableCell>{product.strength}</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>Featured:</Typography>\n                                </TableCell>\n                                <TableCell>{product.isFeatured ? 'Yes' : 'No'}</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>SEO Title:</Typography>\n                                </TableCell>\n                                <TableCell>{product.seo.title}</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>SEO Description:</Typography>\n                                </TableCell>\n                                <TableCell>{product.seo.description}</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>SEO Keywords:</Typography>\n                                </TableCell>\n                                <TableCell>{product.seoKeywords.join(', ')}</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>Shipping Weight:</Typography>\n                                </TableCell>\n                                <TableCell>{product.shipping.weight} oz</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>Shipping Height:</Typography>\n                                </TableCell>\n                                <TableCell>{product.shipping.dimensions.height} in</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>Shipping Width:</Typography>\n                                </TableCell>\n                                <TableCell>{product.shipping.dimensions.width} in</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>Shipping Length:</Typography>\n                                </TableCell>\n                                <TableCell>{product.shipping.dimensions.length} in</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>Date Added:</Typography>\n                                </TableCell>\n                                <TableCell>{new Date(product.createdAt).toLocaleString()}</TableCell>\n                            </TableRow>\n                            {/* Add more rows for additional fields as needed */}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </DialogContent>\n            <Box sx={{}}>\n                <Button\n                    onClick={onClose}\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    sx={{ m: 2, marginLeft: 'auto', display: 'flex' }}\n                >\n                    Close\n                </Button>\n            </Box>\n        </Dialog>\n    );\n};\n\nexport default DetailsView;\n","import React, { useState, useEffect } from 'react';\nimport { Typography, Button, Box, CircularProgress } from '@mui/material';\nimport AddProductModal from '../models/AddProductModal.jsx';\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\nimport DetailsView from './DetailsView.jsx';\n\nconst API_URL = 'http://localhost:8000/api/product/';\n\nconst ProductList = () => {\n    const [detailsViewOpen, setDetailsViewOpen] = useState(false);\n    const [selectedProductForDetails, setSelectedProductForDetails] = useState(null);\n\n    const [products, setProducts] = useState([]);\n    const [isAddProductModalOpen, setAddProductModalOpen] = useState(false);\n    const [isEditModalOpen, setEditModalOpen] = useState(false);\n    const [selectedProduct, setSelectedProduct] = useState(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n\n    const formatDate = (dateString) => {\n        if (dateString) {\n            const date = new Date(dateString);\n\n            const options = {\n                year: 'numeric',\n                month: 'numeric',\n                day: 'numeric',\n            };\n\n            return new Intl.DateTimeFormat('en-US', options).format(date);\n        } else {\n            // Handle the case where dateString is null or undefined\n            return 'Date Not Found';\n        }\n    };\n\n\n\n\n    useEffect(() => {\n        // Fetch products from your backend API\n        setIsLoading(true);\n\n        fetch(API_URL, {\n            credentials: 'include',\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                setProducts(data);\n                setIsLoading(false);\n            })\n            .catch((error) => {\n                setError(error);\n                setIsLoading(false);\n                console.error('Error fetching products:', error);\n            });\n    }, []);\n\n    const handleOpenAddProductModal = () => {\n        setAddProductModalOpen(true);\n    };\n\n    const handleCloseAddProductModal = () => {\n        setAddProductModalOpen(false);\n    };\n    const handleCloseEditProductModal = () => {\n        setAddProductModalOpen(false);\n        setEditModalOpen(false);\n        setSelectedProduct(null); // Reset selectedProduct when the edit modal is closed\n    };\n\n    const handleAddProduct = (newProductData) => {\n        // You can update the 'products' state with the new product data here\n        setProducts([...products, newProductData]);\n        handleCloseAddProductModal();\n    };\n    const handleEditProduct = (product) => {\n        setSelectedProduct(product);\n        setEditModalOpen(true);\n    };\n    const handleOpenDetailsView = (product) => {\n        setSelectedProductForDetails(product);\n        setDetailsViewOpen(true);\n    };\n\n\n\n\n\n\n\n    const handleUpdateProduct = (updatedProduct) => {\n        setProducts((prevProducts) => {\n            // Map through the previous products and replace the one with the matching _id\n            return prevProducts.map((product) =>\n                product._id === updatedProduct._id ? updatedProduct : product\n            );\n        });\n    };\n\n\n\n\n\n    const handleDeleteProduct = (productId) => {\n        const confirmDelete = window.confirm('Are you sure you want to delete this product?');\n\n        if (confirmDelete) {\n            fetch(`http://localhost:8000/api/product/${productId}`, {\n                credentials: 'include',\n                method: 'DELETE',\n            })\n                .then((response) => {\n                    if (response.ok) {\n                        const updatedProducts = products.filter((product) => product._id !== productId);\n                        setProducts(updatedProducts);\n                    } else {\n                        console.error('Error deleting product:', response.statusText);\n                    }\n                })\n                .catch((error) => {\n                    console.error('Error deleting product:', error);\n                });\n        }\n    };\n\n    return (\n        <Box sx={{ p: 2, m: 2 }}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', py: 2 }} >\n                <Typography variant=\"h6\">Product Management</Typography>\n                <Button variant=\"outlined\" color=\"success\" onClick={handleOpenAddProductModal}>\n                    Add Product\n                </Button>\n            </Box>\n            {isLoading ? (\n                <CircularProgress />\n            ) : error ? (\n                <Typography variant=\"body1\" color=\"error\">\n                    Error loading products: {error.message}\n                </Typography>\n            ) : (\n                <DataGrid\n                    sx={{}}\n                    //for date time converstion\n\n                    rows={products.map(product => ({\n                        ...product,\n\n                        createdAt: formatDate(product.createdAt), // Format the date\n\n\n                    }))}\n\n                    //rows={products}\n                    columns={[\n                        //{ field: '_id', headerName: 'ID', flex: 1 },\n                        //{ field: 'brand', headerName: 'Brand', flex: 1 },\n\n                        {\n                            field: 'imgSource',\n                            headerName: 'Image',\n                            flex: 0.5,\n                            renderCell: (params) => (\n                                <img\n                                    src={params.row.imgSource[0].url}\n                                    alt=\"Product\"\n                                    style={{ width: '50px', height: '50px' }}\n                                    loading='lazy'\n                                />\n                            ),\n                        },\n                        { field: 'name', headerName: 'Name', flex: 1 },\n                        //{ field: 'description', headerName: 'Description', flex: 1 },\n                        { field: 'category', headerName: 'Category', flex: 1 },\n                        { field: 'specs', headerName: 'Specs', flex: 1 },\n                        { field: 'totalSold', headerName: 'Sold', flex: 0.25 },\n                        //{ field: 'strength', headerName: 'Strength', flex: 1 },\n                        //{ field: 'isFeatured', headerName: 'Featured', flex: 1 },\n                        //{ field: 'seoKeywords', headerName: 'SEO', flex: 1 },\n                        //{ field: 'seoTitle', headerName: 'SEO Title', flex: 1, valueGetter: (params) => params.row.seo.title, },\n                        //{ field: 'seDescription', headerName: 'SEO Description', flex: 1, valueGetter: (params) => params.row.seo.description, },\n                        //{ field: 'shipping', headerName: 'Shipping Info', flex: 1, valueGetter: (params) => params.row.shipping.weight, },\n                        { field: 'price', headerName: 'Price', flex: 0.5, valueFormatter: ({ value }) => (typeof value === 'number' ? value.toFixed(2) : 'N/A') },\n                        { field: 'createdAt', headerName: 'Date Added', flex: 0.75 },\n\n\n                        {\n                            field: 'actions',\n                            headerName: 'Actions',\n                            flex: 1.75,\n\n                            renderCell: (params) => (\n                                <Box sx={{ ml: -1 }} >\n                                    <Button\n                                        sx={{ fontSize: 8, mr: 1 }}\n                                        variant=\"outlined\"\n                                        color=\"success\"\n                                        onClick={() => handleOpenDetailsView(params.row)}\n                                    >\n                                        Details\n                                    </Button>\n                                    <Button sx={{ fontSize: 8, mr: 1 }} variant=\"outlined\" color=\"primary\" onClick={() => handleEditProduct(params.row)}>\n                                        Edit\n                                    </Button>\n                                    <Button sx={{ fontSize: 8 }} variant=\"outlined\" color=\"secondary\" onClick={() => handleDeleteProduct(params.row._id)}>\n                                        Delete\n                                    </Button>\n                                </Box>\n                            ),\n                        },\n                    ]}\n                    autoHeight\n                    disableSelectionOnClick\n                    getRowId={(row) => row._id}\n                    components={{ Toolbar: GridToolbar }}\n                />\n            )}\n            <AddProductModal\n                open={isAddProductModalOpen || isEditModalOpen}\n                onClose={handleCloseEditProductModal}\n                selectedProduct={selectedProduct}\n                onAddProduct={handleAddProduct} // For adding a product\n                onUpdateProduct={handleUpdateProduct} // For updating a product\n\n            />\n\n            {/* Render the DetailsView component when detailsViewOpen is true */}\n            {detailsViewOpen && (\n                <DetailsView\n                    open={detailsViewOpen}\n                    product={selectedProductForDetails}\n                    onClose={() => setDetailsViewOpen(false)}\n                />\n            )}\n\n\n        </Box>\n    );\n};\n\nexport default ProductList;\n\n\n\n","import React, { useState, useEffect } from 'react';\nimport { Modal, Box, Typography, TextField, Button, Grid } from '@mui/material';\n\nconst EditCustomerModal = ({ open, onClose, customer, updateCustomerList, isViewOnly = false }) => {\n    const [formData, setFormData] = useState({\n        firstName: '',\n        lastName: '',\n        email: '',\n        address: '',\n        address2: '',\n        city: '',\n        state: '',\n        zip: '',\n        phone: '',\n        country: '',\n        orders: [],\n    });\n\n    useEffect(() => {\n        // Populate form data when the modal opens\n        if (customer) {\n            setFormData({\n                firstName: customer.firstName,\n                lastName: customer.lastName,\n                email: customer.email,\n                address: customer.address,\n                address2: customer.address2,\n                city: customer.city,\n                state: customer.state,\n                zip: customer.zip,\n                phone: customer.phone,\n                country: customer.country,\n                orders: customer.orders\n\n            });\n        }\n    }, [customer]);\n\n    const handleInputChange = (e) => {\n        setFormData({ ...formData, [e.target.name]: e.target.value });\n    };\n\n    const handleSubmit = () => {\n        fetch(`http://localhost:8000/api/customer/${customer._id}`, {\n            method: 'PUT',\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(formData),\n        })\n            .then((response) => response.json())\n            .then((updatedCustomer) => {\n                updateCustomerList(updatedCustomer);\n                onClose(); // Close the modal\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n                // Handle errors (e.g., show a notification)\n            });\n    };\n\n    return (\n        <Modal open={open} onClose={onClose}>\n            <Box sx={{ ...modalStyle }}>\n                <Typography variant=\"h6\">Edit Customer</Typography>\n                <Grid container spacing={2}>\n\n                    <Grid item xs={12} sm={6}>\n\n                        <TextField\n                            label=\"First Name\"\n                            name=\"firstName\"\n                            autoComplete=\"given-name\"\n                            value={formData.firstName}\n                            onChange={handleInputChange}\n                            fullWidth\n                            margin=\"normal\"\n                            disabled={isViewOnly}\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            label=\"Last Name\"\n                            name=\"lastName\"\n                            autoComplete=\"family-name\"\n                            value={formData.lastName}\n                            onChange={handleInputChange}\n                            fullWidth\n                            margin=\"normal\"\n                            disabled={isViewOnly}\n                        />\n                    </Grid>\n                    <Grid item xs={12} >\n                        <TextField\n                            label=\"Email\"\n                            name=\"email\"\n                            autoComplete=\"email\"\n                            value={formData.email}\n                            onChange={handleInputChange}\n                            fullWidth\n                            margin=\"normal\"\n                            disabled={isViewOnly}\n                        />\n                    </Grid>\n                    {/* Address Line 1 */}\n                    <Grid item xs={12}>\n                        <TextField\n                            label=\"Address\"\n                            fullWidth\n                            name=\"address1\"\n                            autoComplete=\"address-line1\"\n                            value={formData.address || ''}\n                            onChange={handleInputChange}\n                            disabled={isViewOnly}\n                        />\n                    </Grid>\n\n                    {/* Address Line 2 */}\n                    <Grid item xs={12}>\n                        <TextField\n                            label=\"Address Line 2\"\n                            fullWidth\n                            autoComplete=\"address-line2\"\n                            name=\"address2\"\n                            value={formData.address2 || ''}\n                            onChange={handleInputChange}\n                            disabled={isViewOnly}\n                        />\n                    </Grid>\n\n                    {/* City */}\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            label=\"City\"\n                            fullWidth\n                            name=\"city\"\n                            autoComplete=\"address-level2\"\n                            value={formData.city || ''}\n                            onChange={handleInputChange}\n                            disabled={isViewOnly}\n                        />\n                    </Grid>\n\n                    {/* State */}\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            label=\"State\"\n                            fullWidth\n                            name=\"state\"\n                            autoComplete=\"address-level1\"\n                            value={formData.state || ''}\n                            onChange={handleInputChange}\n                            disabled={isViewOnly}\n                        />\n                    </Grid>\n\n                    {/* Zip Code */}\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            label=\"Zip\"\n                            fullWidth\n                            name=\"zip\"\n                            autoComplete=\"postal-code\"\n                            value={formData.zip || ''}\n                            onChange={handleInputChange}\n                            disabled={isViewOnly}\n                        />\n                    </Grid>\n\n                    {/* Phone Number */}\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            label=\"Phone\"\n                            fullWidth\n                            name=\"phone\"\n                            type=\"tel\"\n                            autoComplete=\"tel\"\n                            value={formData.phone || ''}\n                            onChange={handleInputChange}\n                            disabled={isViewOnly}\n                        />\n                    </Grid>\n\n                    {/* Country */}\n                    <Grid item xs={12}>\n                        <TextField\n                            autoComplete=\"country-name\"\n                            label=\"Country\"\n                            fullWidth\n                            name=\"country\"\n                            value={formData.country || ''}\n                            onChange={handleInputChange}\n                            disabled={isViewOnly}\n                        />\n                    </Grid>\n                    {/* Orders */}\n                    <Grid item xs={6}>\n                        <Typography\n                            label=\"Orders\"\n                            name=\"orders\"\n                            onChange={handleInputChange}\n                        >\n                            Orders:  {customer.orders.length}\n                        </Typography>\n                    </Grid>\n                    {/* Date Created */}\n                    <Grid item xs={6}>\n                        <Typography\n                            label=\"Date Created\"\n                            name=\"dateCreated\"\n                            onChange={handleInputChange}\n                        >\n                            Date Created:  {new Date(customer.createdAt).toLocaleDateString()}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Button\n                            fullWidth\n\n                            onClick={handleSubmit}\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            sx={{ mt: 2 }}\n                            disabled={isViewOnly}\n                        >\n                            Save Changes\n                        </Button>\n                    </Grid>\n                    <Grid item xs={6} >\n                        <Button\n                            fullWidth\n                            onClick={onClose}\n                            variant=\"outlined\"\n                            color=\"secondary\"\n                            sx={{ mt: 2 }}\n                        >\n                            Cancel\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Box>\n        </Modal>\n    );\n};\n\nconst modalStyle = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: '50%',\n    bgcolor: 'background.paper',\n    boxShadow: 24,\n    p: 4,\n    borderRadius: '10px',\n\n};\n\nexport default EditCustomerModal;\n","import React, { useState, useEffect } from 'react';\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@mui/material';\nimport { DataGrid } from '@mui/x-data-grid';\nimport EditCustomerModal from '../models/EditCustomerModal';\n\nconst UserList = () => {\n    const [editCustomerModalOpen, setEditCustomerModalOpen] = useState(false);\n    const [selectedCustomer, setSelectedCustomer] = useState(null);\n    const [customers, setCustomers] = useState([]);\n    const [guests, setGuests] = useState([]);\n    const [deleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false);\n    const [userToDelete, setUserToDelete] = useState(null);\n    const [userTypeToDelete, setUserTypeToDelete] = useState(null); // 'customer' or 'guest'\n\n\n    const handleDeleteUser = (userId, userType) => {\n        setUserToDelete(userId);\n        setUserTypeToDelete(userType); // 'customer' or 'guest'\n        setDeleteConfirmationOpen(true);\n    };\n\n\n    const confirmDeleteUser = () => {\n        const url = userTypeToDelete === 'customer'\n            ? `http://localhost:8000/api/customer/${userToDelete}`\n            : `http://localhost:8000/api/guest/${userToDelete}`;\n\n        fetch(url, {\n            method: 'DELETE',\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        })\n            .then(response => {\n                if (response.ok) {\n                    // Update the state to remove the user from the list\n                    if (userTypeToDelete === 'customer') {\n                        setCustomers(prevCustomers => prevCustomers.filter(customer => customer._id !== userToDelete));\n                    } else {\n                        setGuests(prevGuests => prevGuests.filter(guest => guest._id !== userToDelete));\n                    }\n                    alert('User successfully deleted');\n                } else {\n                    console.error('Deletion failed:', response.status);\n                }\n            })\n            .catch(error => {\n                console.error('Error:', error);\n            })\n            .finally(() => {\n                setDeleteConfirmationOpen(false);\n            });\n    };\n\n\n\n    const fetchGuests = () => {\n        fetch('http://localhost:8000/api/guest/', {\n            method: 'GET',\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(response => response.json())\n            .then(data => {\n                setGuests(data); // Set the fetched data\n            })\n            .catch(error => {\n                console.error('Error fetching guest data:', error);\n            });\n    };\n    const fetchCustomers = () => {\n        fetch('http://localhost:8000/api/customer', {\n            method: 'GET',\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(response => response.json())\n            .then(data => {\n                setCustomers(data); // Set the fetched data\n            })\n            .catch(error => {\n                console.error('Error fetching customer data:', error);\n            });\n    };\n\n\n    useEffect(() => {\n        fetchCustomers();\n        fetchGuests()\n    }, []);\n\n\n\n    // Filter customers to separate admins and non-admins\n    const admins = customers.filter(customer => customer.isAdmin);\n    const nonAdmins = customers.filter(customer => !customer.isAdmin);\n\n    const handleMakeAdmin = (customerId) => {\n\n        // Send request to backend to update the isAdmin flag\n        fetch(`http://localhost:8000/api/customer/${customerId}`, {\n            method: 'PUT', // or the appropriate method used in your backend\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ isAdmin: true })\n        })\n            .then((response) => {\n                if (response.status === 200) {\n                    // Update the customers list in state\n                    setCustomers((customers) =>\n                        customers.map((customer) =>\n                            customer._id === customerId ? { ...customer, isAdmin: true } : customer\n                        )\n                    );\n                    return response.json();\n                } else {\n                    throw new Error('Failed to make the user admin');\n                }\n            })\n            .then((updatedCustomer) => {\n\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n            });\n    };\n\n\n\n    const handleRemoveFromAdmin = (adminId) => {\n        if (admins.length <= 1) {\n            // Do not allow removing the last admin\n            alert(\"You cannot remove the last admin.\");\n            return;\n        }\n\n        // Send request to backend to update the isAdmin flag\n        fetch(`http://localhost:8000/api/customer/${adminId}`, {\n            method: 'PUT', // or the appropriate method used in your backend\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ isAdmin: false })\n        })\n            .then((response) => response.json())\n            .then(() => {\n                // Update the customers list in state\n                setCustomers(customers.map(customer =>\n                    customer._id === adminId ? { ...customer, isAdmin: false } : customer\n                ));\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n            });\n    };\n\n    const updateCustomerInList = (updatedCustomer) => {\n        setCustomers(customers.map(customer =>\n            customer._id === updatedCustomer._id ? updatedCustomer : customer\n        ));\n    };\n\n    const handleEditCustomer = (customer) => {\n        setSelectedCustomer(customer);\n        setEditCustomerModalOpen(true);\n    };\n    const handleViewGuestDetails = (guest) => {\n        setSelectedCustomer(guest);\n        setEditCustomerModalOpen(true);\n    };\n\n    const buttonStyles = {\n        fontSize: '10px',\n        margin: '5px',\n    }\n\n    return (\n        <div style={{ padding: 20, margin: 20 }}>\n            <h2 style={{ margin: 10 }}>Admin List</h2>\n            <DataGrid\n\n                rows={admins}\n                columns={[\n                    {\n                        field: 'fullName',\n                        headerName: 'Full Name',\n                        flex: 1,\n                        renderCell: (params) => (\n                            <div>{params.row.firstName} {params.row.lastName}</div>\n                        )\n                    },\n                    { field: 'email', headerName: 'Email', flex: 1 },\n                    { field: '_id', headerName: 'ID', flex: 1.25 },\n                    { field: 'createdAt', headerName: 'Registration Date', flex: 0.75, valueFormatter: ({ value }) => new Date(value).toLocaleDateString(), },\n                    {\n                        field: 'actions',\n                        headerName: 'Actions',\n                        flex: 1.5,\n                        renderCell: (params) => (\n                            <div>\n                                <Button\n                                    sx={buttonStyles}\n                                    variant=\"outlined\"\n                                    color='secondary'\n                                    onClick={() => handleEditCustomer(params.row)}\n\n\n                                >\n                                    Edit\n                                </Button>\n                                <Button\n                                    sx={buttonStyles}\n                                    variant=\"outlined\"\n                                    color=\"error\"\n                                    onClick={() => handleRemoveFromAdmin(params.row._id)}\n                                    disabled={admins.length <= 1}\n                                >\n                                    Remove Admin\n                                </Button>\n\n                                <Dialog\n                                    open={deleteConfirmationOpen}\n                                    onClose={() => setDeleteConfirmationOpen(false)}\n                                >\n                                    <DialogTitle>Confirm Deletion</DialogTitle>\n                                    <DialogContent>\n                                        <DialogContentText>\n                                            Are you sure you want to delete this user?\n                                        </DialogContentText>\n                                    </DialogContent>\n                                    <DialogActions>\n                                        <Button onClick={() => setDeleteConfirmationOpen(false)} color=\"primary\">\n                                            Cancel\n                                        </Button>\n                                        <Button onClick={confirmDeleteUser} color=\"error\">\n                                            Delete\n                                        </Button>\n                                    </DialogActions>\n                                </Dialog>\n                            </div>\n                        ),\n                    },\n                ]}\n                autoHeight\n                disableSelectionOnClick\n                getRowId={(row) => row._id}\n            />\n            <h2 style={{ margin: 10 }}>Customer List</h2>\n            <DataGrid\n                rows={nonAdmins}\n                columns={[\n                    {\n                        field: 'fullName',\n                        headerName: 'Full Name',\n                        flex: 1,\n                        renderCell: (params) => (\n                            <div>{params.row.firstName} {params.row.lastName}</div>\n                        )\n                    },\n                    { field: 'email', headerName: 'Email', flex: 1 },\n                    { field: '_id', headerName: 'ID', flex: 1.25 },\n                    { field: 'createdAt', headerName: 'Registration Date', flex: 1, valueFormatter: ({ value }) => new Date(value).toLocaleDateString(), },\n                    {\n                        field: 'makeAdmin',\n                        headerName: 'Make Admin',\n                        flex: 1.5,\n                        renderCell: (params) => (\n                            !params.row.isAdmin && (\n                                <>\n                                    <Button\n                                        sx={buttonStyles}\n                                        variant=\"outlined\"\n                                        color='secondary'\n                                        onClick={() => handleEditCustomer(params.row)}\n\n                                    >\n                                        Edit\n                                    </Button>\n                                    <Button\n                                        sx={buttonStyles}\n                                        variant=\"outlined\"\n                                        color=\"primary\"\n                                        onClick={() => handleMakeAdmin(params.row._id)}\n                                    >\n                                        Make Admin\n                                    </Button>\n                                    <Button\n                                        sx={buttonStyles}\n                                        variant=\"outlined\"\n                                        color=\"error\"\n                                        onClick={() => handleDeleteUser(params.row._id, 'customer')}\n                                    >\n                                        Delete User\n                                    </Button>\n                                </>\n\n                            )\n                        ),\n                    },\n                ]}\n                autoHeight\n                disableSelectionOnClick\n                getRowId={(row) => row._id}\n            />\n            <div>\n                <h2 style={{ margin: 10 }}>Guest User List</h2>\n                <DataGrid\n                    rows={guests}\n                    columns={[\n                        {\n                            field: 'fullName',\n                            headerName: 'Full Name',\n                            flex: 1,\n                            renderCell: (params) => (\n                                <div>{params.row.firstName} {params.row.lastName}</div>\n                            )\n                        },\n                        { field: 'email', headerName: 'Email', flex: 1 },\n                        { field: '_id', headerName: 'ID', flex: 1.25 },\n                        { field: 'createdAt', headerName: 'Registration Date', flex: 1, valueFormatter: ({ value }) => new Date(value).toLocaleDateString(), },\n                        {\n                            field: 'actions',\n                            headerName: 'Actions',\n                            flex: 1.5,\n                            renderCell: (params) => (\n                                <>\n                                    <Button\n                                        sx={buttonStyles}\n                                        variant=\"outlined\"\n                                        color=\"primary\"\n                                        onClick={() => handleViewGuestDetails(params.row)}\n                                    >\n                                        View Details\n                                    </Button>\n                                    <Button\n                                        sx={buttonStyles}\n                                        variant=\"outlined\"\n                                        color=\"error\"\n                                        onClick={() => handleDeleteUser(params.row._id, 'guest')}\n                                    >\n                                        Delete Guest\n                                    </Button>\n                                </>\n                            ),\n                        },\n\n\n                    ]}\n                    autoHeight\n                    disableSelectionOnClick\n                    getRowId={(row) => row._id}\n                />\n            </div>\n\n            {editCustomerModalOpen && (\n                <EditCustomerModal\n                    open={editCustomerModalOpen}\n                    onClose={() => setEditCustomerModalOpen(false)}\n                    customer={selectedCustomer}\n                    updateCustomerList={updateCustomerInList}\n                    isViewOnly={true} // Add this line\n                />\n            )}\n\n\n        </div>\n    );\n};\n\nexport default UserList;\n","import { Button, Card, CardContent, Dialog, DialogContent, DialogTitle, Grid, IconButton, Typography } from '@mui/material';\nimport React from 'react';\n\nconst OrderDetails = ({ order, open, onClose }) => {\n\n\n    return (\n        <Dialog open={open} onClose={onClose} maxWidth=\"lg\" fullWidth>\n            <DialogTitle sx={{ backgroundColor: '#282F48', color: 'white', textAlign: 'center', display: 'flex', justifyContent: 'space-between' }}><span style={{ fontSize: '28px', }}>Order Details</span>\n                <IconButton sx={{ transform: 'translate(0px, -7px)' }} className=\"cart-close-icon\" onClick={onClose}>\n                    {/* CLOSE ICON */}\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill='white' height=\"35\" width=\"35\"><path d=\"m10.458 31.458-1.916-1.916 9.5-9.542-9.5-9.542 1.916-1.916 9.542 9.5 9.542-9.5 1.916 1.916-9.5 9.542 9.5 9.542-1.916 1.916-9.542-9.5Z\" /></svg>\n                </IconButton>\n            </DialogTitle>\n            <DialogContent dividers>\n                <div>\n\n                    <Typography variant=\"h6\" gutterBottom>Order ID: {order.orderNumber} </Typography>\n                    <Grid container spacing={2}>\n                        {/* Customer Information */}\n                        <Grid item xs={12} md={6} lg={4}>\n                            <Card>\n                                <CardContent>\n                                    <Typography variant=\"body1\" gutterBottom>Customer Details:</Typography>\n                                    <Typography variant=\"body2\">Email: {order.customerEmail}</Typography>\n                                    <Typography variant=\"body2\">Customer ID: {order.createdBy}</Typography>\n                                    <Typography variant=\"body2\">{order.notes ? \"Order Notes:\" + order.notes : \"No Order Notes\"}</Typography>\n                                </CardContent>\n                            </Card>\n                        </Grid>\n\n\n                        {/* Order Total */}\n                        <Grid item xs={12} md={6} lg={4}>\n                            <Card>\n                                <CardContent>\n                                    <Typography variant=\"body1\" gutterBottom>Order Total: ${order.totalAmount.grandTotal.toFixed(2)}</Typography>\n                                    <Typography variant=\"body2\">Subtotal: ${order.totalAmount.subTotal.toFixed(2)}</Typography>\n                                    <Typography variant=\"body2\">Tax: ${order.totalAmount.tax.toFixed(2)}</Typography>\n                                    <Typography variant=\"body2\">Shipping: ${order.totalAmount.shippingCost.toFixed(2)}</Typography>\n                                </CardContent>\n                            </Card>\n                        </Grid>\n\n\n                        {/* Order Details */}\n                        <Grid item xs={12} md={6} lg={4}>\n                            <Card>\n                                <CardContent>\n                                    <Typography variant=\"body1\" gutterBottom>Order Details: <strong> Status: {order.orderStatus}</strong></Typography>\n\n                                    <Typography variant=\"body2\">Order Placed: {new Date(order.orderDate).toLocaleDateString()}</Typography>\n\n                                    <Typography variant=\"body2\">Transaction Id: {order.transactionId}</Typography>\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                        {/* Shipping Details */}\n                        <Grid item xs={12} md={6} lg={4}>\n                            <Card>\n                                <CardContent>\n                                    <Typography variant=\"body1\" gutterBottom>Shipping Details: <strong>{order.shippingMethod.provider} {order.shippingMethod.type}</strong></Typography>\n\n                                    <Typography variant=\"body2\">Print Label:\n                                        <Button sx={{ height: '15px' }} onClick={() => window.open(order.shippingMethod.labelUrl)} >Get Label</Button>\n                                    </Typography>\n\n\n                                    <Typography variant=\"body2\">Print Label:\n                                        <Button sx={{ height: '15px' }} onClick={() => window.open(order.shippingMethod.trackingUrl)} >Tracking Details</Button>\n                                    </Typography>\n                                </CardContent>\n                            </Card>\n                        </Grid>\n\n\n                        {/* Products in the Order */}\n                        <Grid item xs={12} md={6} lg={6}>\n                            <Card>\n                                <CardContent>\n                                    <Typography variant=\"body1\" gutterBottom>Products Ordered:</Typography>\n                                    {/* Map through products array to list them */}\n                                    {order.products.map((product, index) => (\n                                        <React.Fragment key={index}>\n                                            <div style={{ display: 'flex', border: '0.1px solid black', borderRadius: '5px', padding: '5px', marginBottom: '5px' }}>\n                                                <img loading='lazy' height={75} src={product.img} alt={index + 'product image'} />\n                                                <div>\n                                                    <Typography variant=\"body2\">\n                                                        Product: {product.name}\n                                                    </Typography>\n                                                    <Typography variant=\"body2\">\n                                                        Quantity: {product.quantity}\n                                                    </Typography>\n                                                    <Typography variant=\"body2\">\n                                                        Price: ${product.price}\n                                                    </Typography>\n                                                    {index < order.products.length - 1 && <br />}\n                                                </div>\n                                            </div>\n                                        </React.Fragment>\n                                    ))}\n\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                        {/* Shipping Address */}\n                        <Grid item xs={12} md={6} lg={3}>\n                            <Card>\n                                <CardContent>\n                                    <Typography variant=\"body1\" gutterBottom><strong>Ship to:</strong></Typography>\n                                    <Typography variant=\"body2\">{order.address}</Typography>\n                                </CardContent>\n                            </Card>\n                        </Grid>\n\n\n                        <Grid sx={{ display: 'flex', justifyContent: 'end' }} item xs={12} md={12} lg={12}>\n\n                            <Button variant='outlined' onClick={onClose}>Close</Button>\n\n\n                        </Grid>\n                        {/* Additional details can be added in a similar fashion */}\n                    </Grid>\n\n                </div>\n\n            </DialogContent>\n        </Dialog>\n\n\n\n\n    );\n};\n\nexport default OrderDetails;\n","import React, { useState, useEffect } from 'react';\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\nimport { TextField, Select, MenuItem, Snackbar, FormControl, InputLabel, Box, CircularProgress, Typography, Card, CardContent, Button } from '@mui/material';\nimport Tooltip from '@mui/material/Tooltip';\nimport OrderDetails from './OrderDetails';\n\n\nconst OrderList = () => {\n    const [orders, setOrders] = useState([]);\n    const [filterCriteria, setFilterCriteria] = useState('');\n    const [searchKeyword, setSearchKeyword] = useState('');\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\n    const [snackbarMessage, setSnackbarMessage] = useState('');\n    const [filteredOrders, setFilteredOrders] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [selectedOrder, setSelectedOrder] = useState(null);\n    const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n    // Function to handle dialog close\n    const handleCloseDialog = () => {\n        setIsDialogOpen(false);\n    };\n\n\n\n    useEffect(() => {\n\n        fetch('http://localhost:8000/api/order', {\n            credentials: 'include',\n        })\n            .then((response) => response.json())\n\n            .then((data) => {\n\n                setOrders(data);\n                setLoading(false);  // Set loading to false once data is fetched\n                filterOrders(data);\n            })\n            .catch((error) => {\n                console.error('Error fetching orders:', error);\n                setLoading(false);  // Also set loading to false on an error\n            });\n    }, []);\n\n    // Function to handle order deletion\n    const handleDeleteOrder = (orderId) => {\n        const isConfirmed = window.confirm('Are you sure you want to delete this order? - It will be permanently deleted');\n        if (isConfirmed) {\n            fetch(`http://localhost:8000/api/order/${orderId}`, {\n                method: 'DELETE',\n                credentials: 'include',\n                headers: {\n                    'Content-Type': 'application/json',\n                }\n            })\n                .then((response) => response.json())\n                .then(() => {\n                    // Update orders state to remove the deleted order\n                    const updatedOrders = orders.filter(order => order._id !== orderId);\n                    setOrders(updatedOrders);\n                    setFilteredOrders(updatedOrders);\n\n                    setSnackbarMessage('Order deleted successfully');\n                    setSnackbarOpen(true);\n                })\n                .catch((error) => {\n                    console.error('Error deleting order:', error);\n                    setSnackbarMessage('Error deleting order');\n                    setSnackbarOpen(true);\n                });\n        };\n    };\n    // Use this effect to filter and update filteredOrders\n    useEffect(() => {\n        filterOrders();\n\n    }, [searchKeyword, filterCriteria,]);\n\n\n\n\n\n    const filterOrders = (fetchedOrders = orders) => {\n        const filtered = fetchedOrders.filter((order) => {\n            const keyword = searchKeyword.toLowerCase();\n            // Combine all product names into a single string\n\n\n            // Combine all product names into a single string\n            const productNames = order.products\n                .map((product) => product.name.toLowerCase())\n                .join(' ');\n\n\n            return (\n                (filterCriteria === '' || order.orderStatus === filterCriteria) &&\n                (keyword === '' ||\n                    order._id.toLowerCase().includes(keyword) ||\n                    order.customer.toLowerCase().includes(keyword) ||\n                    order.orderDate.toLowerCase().includes(keyword) ||\n                    order.orderStatus.toLowerCase().includes(keyword) ||\n                    order.address?.toLowerCase().includes(keyword) ||\n                    order.shippingMethod.provider?.toLowerCase().includes(keyword) ||\n\n                    order.products.productId?.toString().includes(keyword) ||\n                    productNames.includes(keyword)\n                )\n            );\n        });\n        setFilteredOrders(filtered);\n    };\n\n\n\n\n\n\n    const handleOrderStatusChange = (event, orderId) => {\n        if (event && event.target) {\n            const newStatus = event.target.value;\n\n            // Send a PUT request to update the order status\n            fetch(`http://localhost:8000/api/order/${orderId}`, {\n                method: 'PUT',\n                credentials: 'include',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ orderStatus: newStatus }),\n            })\n                .then((response) => response.json())\n                .then((updatedOrder) => {\n                    // Update the order status in the client-side state\n                    const updatedOrders = orders.map((order) => {\n                        if (order._id === updatedOrder._id) {\n                            return { ...order, orderStatus: updatedOrder.orderStatus };\n                        } else {\n                            return order;\n                        }\n                    });\n                    setOrders(updatedOrders);\n                    setFilteredOrders(updatedOrders)\n                    // Show a success message to the user\n                    setSnackbarMessage(`Order status updated to ${updatedOrder.orderStatus}`);\n                    setSnackbarOpen(true);\n                })\n                .catch((error) => {\n                    console.error('Error updating order status:', error);\n\n                    // Show an error message to the user\n                    setSnackbarMessage('Error updating order status');\n                    setSnackbarOpen(true);\n                });\n        }\n    };\n\n\n\n\n    const handleSnackbarClose = () => {\n        setSnackbarOpen(false);\n    };\n\n    const handleDetailsClick = (order) => {\n        setSelectedOrder(order);\n        setIsDialogOpen(true)\n    };\n\n\n\n\n    const columns = [\n        {\n            field: '_id',\n            headerName: 'Order ID',\n            flex: 2,\n            renderCell: (params) => (\n                <Tooltip title={params.value}>\n                    <div style={{ overflow: \"hidden\", textOverflow: \"ellipsis\", whiteSpace: \"nowrap\" }}>\n                        {params.value}\n                    </div>\n                </Tooltip>\n            ),\n        },\n\n        {\n            field: 'customer',\n            headerName: 'Customer ID',\n            flex: 1.5,\n            renderCell: (params) => (\n                <Tooltip title={params.value}>\n                    <div style={{ overflow: \"hidden\", textOverflow: \"ellipsis\", whiteSpace: \"nowrap\" }}>\n                        {params.value}\n                    </div>\n                </Tooltip>\n            ),\n        },\n\n        {\n            field: 'orderDate',\n            headerName: 'Order Date',\n            flex: 1,\n            valueFormatter: ({ value }) => new Date(value).toLocaleDateString(),\n        },\n        {\n            field: 'address',\n            headerName: 'Shipping To',\n            flex: 1.5,\n\n        },\n        {\n            field: 'actions',\n            headerName: 'Actions',\n            flex: 1.5,\n            renderCell: (params) => (\n                <Box>\n\n                    <Button\n                        sx={{ fontSize: 10, p: 1 }}\n                        variant=\"outlined\"\n                        onClick={() => handleDetailsClick(params.row)}\n                    >\n                        Details\n                    </Button>\n                    <Button sx={{ fontSize: 10, m: 1, p: 1 }} variant=\"outlined\" color=\"secondary\" onClick={() => handleDeleteOrder(params.row._id)}>\n                        Delete\n                    </Button>\n                </Box>\n            )\n        },\n\n\n        {\n            field: 'orderStatus',\n            headerName: 'Order Status',\n            flex: 1.5,\n            renderCell: (params) => (\n                <Select\n                    fullWidth\n                    sx={{ height: 50, ml: -1 }}\n                    value={params.row.orderStatus}\n                    onChange={(e) => handleOrderStatusChange(e, params.row._id)}\n\n                >\n                    <MenuItem value=\"Pending\" >\n\n                        <svg color='blue' xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M17 12c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm1.65 7.35L16.5 17.2V14h1v2.79l1.85 1.85-.7.71zM18 3h-3.18C14.4 1.84 13.3 1 12 1s-2.4.84-2.82 2H6c-1.1 0-2 .9-2 2v15c0 1.1.9 2 2 2h6.11a6.743 6.743 0 0 1-1.42-2H6V5h2v3h8V5h2v5.08c.71.1 1.38.31 2 .6V5c0-1.1-.9-2-2-2zm-6 2c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1z\" /></svg>\n                        Pending\n                    </MenuItem>\n                    <MenuItem value=\"Shipped\">\n                        <svg height='24' version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" enableBackground=\"new 0 0 48 48\">\n                            <path fill=\"#8BC34A\" d=\"M43,36H29V14h10.6c0.9,0,1.6,0.6,1.9,1.4L45,26v8C45,35.1,44.1,36,43,36z\" />\n                            <path fill=\"#388E3C\" d=\"M29,36H5c-1.1,0-2-0.9-2-2V9c0-1.1,0.9-2,2-2h22c1.1,0,2,0.9,2,2V36z\" />\n                            <g fill=\"#37474F\">\n                                <circle cx=\"37\" cy=\"36\" r=\"5\" />\n                                <circle cx=\"13\" cy=\"36\" r=\"5\" />\n                            </g>\n                            <g fill=\"#78909C\">\n                                <circle cx=\"37\" cy=\"36\" r=\"2\" />\n                                <circle cx=\"13\" cy=\"36\" r=\"2\" />\n                            </g>\n                            <path fill=\"#37474F\" d=\"M41,25h-7c-0.6,0-1-0.4-1-1v-7c0-0.6,0.4-1,1-1h5.3c0.4,0,0.8,0.3,0.9,0.7l1.7,5.2c0,0.1,0.1,0.2,0.1,0.3V24 C42,24.6,41.6,25,41,25z\" />\n                            <polygon fill=\"#DCEDC8\" points=\"21.8,13.8 13.9,21.7 10.2,17.9 8,20.1 13.9,26 24,15.9\" />\n                        </svg>Shipped\n                    </MenuItem>\n                    <MenuItem value=\"Delivered\" >\n                        <svg height='24' version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" enableBackground=\"new 0 0 48 48\">\n                            <polygon fill=\"#43A047\" points=\"40.6,12.1 17,35.7 7.4,26.1 4.6,29 17,41.3 43.4,14.9\" />\n                        </svg> Delivered\n                    </MenuItem>\n                    <MenuItem value=\"Cancelled\">\n                        <svg height='24' version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" enableBackground=\"new 0 0 48 48\">\n                            <path fill=\"#D50000\" d=\"M24,6C14.1,6,6,14.1,6,24s8.1,18,18,18s18-8.1,18-18S33.9,6,24,6z M24,10c3.1,0,6,1.1,8.4,2.8L12.8,32.4 C11.1,30,10,27.1,10,24C10,16.3,16.3,10,24,10z M24,38c-3.1,0-6-1.1-8.4-2.8l19.6-19.6C36.9,18,38,20.9,38,24C38,31.7,31.7,38,24,38 z\" />\n                        </svg> Cancelled\n                    </MenuItem>\n                </Select>\n            ),\n        },\n    ];\n\n\n    if (loading) {\n        return (\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"80vh\">\n                <CircularProgress />\n            </Box>\n        );\n    }\n\n    return (\n\n        <Box sx={{ m: 3, py: 5 }}>\n            <Typography variant=\"h4\" gutterBottom>Order List </Typography>\n\n            <Card variant=\"outlined\" sx={{ mb: 3 }}>\n                <CardContent sx={{ py: 2 }}>\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <TextField\n                            name='searchBar'\n                            sx={{ mr: 5, flexGrow: 1 }}\n                            label=\"Search by keyword\"\n                            value={searchKeyword}\n                            onChange={(e) => setSearchKeyword(e.target.value)}\n                        />\n                        <FormControl sx={{ width: '20%' }}>\n                            <InputLabel sx={{ backgroundColor: 'white', px: 1 }}>Order Status</InputLabel>\n                            <Select value={filterCriteria} onChange={(e) => setFilterCriteria(e.target.value)}\n                                defaultValue='All Orders'>\n                                <MenuItem value=\"\">All Orders</MenuItem>\n                                <MenuItem value=\"Pending\">Pending</MenuItem>\n                                <MenuItem value=\"Processing\">Processing</MenuItem>\n                                <MenuItem value=\"Shipped\">Shipped</MenuItem>\n                                <MenuItem value=\"Delivered\">Delivered</MenuItem>\n                                <MenuItem value=\"Cancelled\">Cancelled</MenuItem>\n                                {/* Add more filter options based on order status */}\n                            </Select>\n                        </FormControl>\n                    </Box>\n                </CardContent>\n            </Card>\n            <DataGrid\n                getRowId={(row) => row._id}\n                rows={filteredOrders}\n                columns={columns}\n                components={{ Toolbar: GridToolbar }}\n                onCellClick={(params) => {\n                    if (params.field === 'orderStatus') {\n                        // Handle cell click for order status change\n                        handleOrderStatusChange(params.event, params.row._id);\n                    }\n                }}\n            />\n            {/* Snackbar for success/error messages */}\n            <Snackbar\n                open={snackbarOpen}\n                autoHideDuration={3000}\n                onClose={handleSnackbarClose}\n                message={snackbarMessage}\n            />\n            {\n                filteredOrders.length === 0 && !loading && <Typography variant='h4' sx={{ textAlign: \"center\" }} >No orders found based on the current filter/search criteria.</Typography>\n            }\n            {selectedOrder && <OrderDetails order={selectedOrder} open={isDialogOpen}\n                onClose={handleCloseDialog} />}\n        </Box>\n\n    );\n};\n\nexport default OrderList;\n","import React, { useState, useEffect } from 'react';\nimport { BarChart } from '@mui/x-charts/BarChart';\nimport { Box, Button, Card, CardContent, CircularProgress, Grid, Typography } from '@mui/material';\nimport { axisClasses } from '@mui/x-charts';\nimport OrderDetails from './OrderDetails';\n\n\n\nconst SalesOverview = () => {\n\n    const [salesData, setSalesData] = useState([]);\n    const [products, setProducts] = useState(['']);\n    const [totalProducts, setTotalProducts] = useState(0);\n    const [totalOrders, setTotalOrders] = useState(0);\n    const [totalSales, setTotalSales] = useState(0);\n    const [pendingOrders, setPendingOrders] = useState(0);\n    const [recentOrders, setRecentOrders] = useState([]);\n    const [totalAdmins, setTotalAdmins] = useState(0);\n    const [totalCustomers, setTotalCustomers] = useState(0);\n    const [recentAdmins, setRecentAdmins] = useState([]);\n    const [recentCustomers, setRecentCustomers] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [orders, setOrders] = useState([]);\n    const [isDialogOpen, setIsDialogOpen] = useState(false);\n    const [currentOrderId, setCurrentOrderId] = useState(null);\n    const [guestData, setGuestData] = useState([]);\n    const totalGuestOrders = guestData.reduce((total, guest) => total + guest.orders.length, 0);\n\n\n    const handleOpenDialog = orderId => {\n        setCurrentOrderId(orderId);\n        setIsDialogOpen(true);\n    };\n\n\n\n    // Function to handle dialog close\n    const handleCloseDialog = () => {\n        setIsDialogOpen(false);\n    };\n\n\n\n\n\n\n    const aggregateSalesData = (data) => {\n        const aggregatedData = {};\n\n        data.forEach(item => {\n            const monthKey = `month_${item.month}`;\n            if (!aggregatedData[monthKey]) {\n                aggregatedData[monthKey] = {};\n            }\n            if (!aggregatedData[monthKey][item.productId]) {\n                aggregatedData[monthKey][item.productId] = { ...item, totalQuantity: 0, totalAmount: 0 };\n            }\n            aggregatedData[monthKey][item.productId].totalQuantity += item.totalQuantity;\n            aggregatedData[monthKey][item.productId].totalAmount += item.totalAmount;\n        });\n\n        return aggregatedData;\n    };\n    //faster than importing\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n\n    // Function to transform and sort data for the chart\n    const transformAndSortDataForChart = (aggregatedData) => {\n        const transformedData = {};\n        let previousMonthProducts = new Set(); // To keep track of products from the previous month\n\n        Object.keys(aggregatedData).forEach(monthKey => {\n            const monthNumber = parseInt(monthKey.split('_')[1], 10);\n            const monthName = monthNames[monthNumber - 1]; // Convert month number to month name\n            const products = Object.values(aggregatedData[monthKey]);\n            products.sort((a, b) => b.totalAmount - a.totalAmount); // Sort by totalAmount\n\n            // Initialize month data\n            transformedData[monthKey] = { month: monthName };\n\n            let currentMonthProducts = new Set(); // To keep track of products for the current month\n\n            if (products.length > 0) {\n                // Process existing products\n                const topProducts = products.slice(0, 4); // Select top 4 products\n                topProducts.forEach((product) => {\n                    const productNameKey = `${product.name}`;\n                    transformedData[monthKey][productNameKey] = product.totalAmount; // Or totalQuantity\n                    currentMonthProducts.add(productNameKey);\n                });\n            }\n\n            // Add missing products from the previous month with totalAmount 0\n            previousMonthProducts.forEach(productName => {\n                if (!currentMonthProducts.has(productName)) {\n                    transformedData[monthKey][productName] = 0;\n                }\n            });\n\n            // Update previousMonthProducts for the next iteration\n            previousMonthProducts = new Set([...currentMonthProducts]);\n        });\n\n\n        return Object.values(transformedData);\n    };\n\n\n\n\n\n    const fetchData = async (url, signal) => {\n        const response = await fetch(url, {\n            method: 'GET',\n            signal: signal,\n            credentials: 'include', // Include credentials in the request\n            headers: {\n                'Content-Type': 'application/json',\n\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error(`Failed to fetch data from ${url}`);\n        }\n\n        return response.json();\n    };\n\n\n\n\n    useEffect(() => {\n        const controller = new AbortController();\n        const { signal } = controller;\n\n        // Fetch all necessary data on component mount\n        const fetchAllData = async () => {\n            try {\n                setLoading(true);\n\n\n\n                // Fetch guest data\n                const guestDataResponse = await fetchData('http://localhost:8000/api/guest', signal);\n                setGuestData(guestDataResponse);\n\n\n\n                // Fetch products\n                const productData = await fetchData('http://localhost:8000/api/product', signal);\n                setProducts(productData);\n                setTotalProducts(productData.length);\n\n\n\n                // Fetch orders\n                const orderData = await fetchData('http://localhost:8000/api/order', signal);\n                const sortedOrders = orderData.sort((a, b) => new Date(b.orderDate) - new Date(a.orderDate)).slice(0, 5);\n                setRecentOrders(sortedOrders);\n                setTotalOrders(orderData.length);\n                setOrders(orderData);\n\n                setTotalSales(orderData.reduce((sum, order) => sum + order.totalAmount.grandTotal, 0));\n                setPendingOrders(orderData.filter(order => order.orderStatus === 'Pending').length);\n\n\n                // Fetch customer data\n                const customerData = await fetchData('http://localhost:8000/api/customer', signal);\n\n                // Separate out admins from customers\n                const admins = customerData.filter(customer => customer.isAdmin);\n                const customers = customerData.filter(customer => !customer.isAdmin);\n\n                // Set total and recent customers\n                setTotalCustomers(customers.length);\n                setRecentCustomers(customers.sort((a, b) => new Date(b.registrationDate) - new Date(a.registrationDate)).slice(0, 5));\n\n                // Set total and recent admins\n                setTotalAdmins(admins.length);\n                setRecentAdmins(admins.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)).slice(0, 5));\n\n                // Fetch top selling products\n                const data = await fetchData('http://localhost:8000/api/order/best-sellers-six-months', signal);\n\n                const aggregatedData = aggregateSalesData(data);\n                const chartData = transformAndSortDataForChart(aggregatedData);\n\n                setSalesData(chartData);\n\n\n            } catch (error) {\n                if (error.name !== 'AbortError') {\n                    console.error('Error fetching data:', error);\n                }\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchAllData();\n\n        return () => {\n            controller.abort();\n        };\n    }, []);\n\n    const chartSetting = {\n        yAxis: [\n            {\n                label: 'Total Sales ($)',\n\n            },\n\n\n        ],\n        width: 1000, // Adjust the width to fit your layout\n        height: 500, // Adjust the height to fit your layout\n        sx: {\n            [`.${axisClasses.left} .${axisClasses.label}`]: {\n                transform: 'translate(50px, -190px) ',\n                //rotate 90 degress\n\n\n\n            },\n            // Styling for Y-axis labels\n            [`.${axisClasses.bottom} .${axisClasses.tickLabel}`]: {\n                fontSize: '26px',\n            },\n        },\n        xAxis: [\n            {\n                scaleType: 'band',\n                dataKey: 'month',\n\n            },\n        ],\n    };\n\n\n    const valueFormatter = (value) => {\n        // Convert string to number if necessary\n        const numericValue = typeof value === 'string' ? parseFloat(value) : value;\n\n        // Check if the conversion resulted in a valid number\n        if (!isNaN(numericValue)) {\n            return `$${numericValue.toFixed(2)}`;\n        } else {\n            return 'N/A'; // Return a fallback value for invalid numbers\n        }\n    };\n\n\n\n    const shuffleArray = (array) => {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(0.2 * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]]; // Swap elements\n        }\n        return array;\n    };\n\n\n    const generateChartSeries = (salesData) => {\n        let series = Object.keys(salesData[0] || {}).filter(key => key !== 'month').map((key, index) => ({\n            dataKey: key,\n            label: key,\n            valueFormatter,\n            color: ['#06B2AF', '#2E96FF', '#AA00C6', '#60009B'][index % 4]\n        }));\n\n\n        // Shuffle the series array\n        return shuffleArray(series);\n    };\n\n    const chartSeries = generateChartSeries(salesData);\n\n\n\n\n    if (loading) {\n        return <Box><CircularProgress /></Box>;\n    }\n    const Legend = ({ series }) => {\n        return (\n            <div style={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap', justifyContent: 'space-between', marginTop: '20px' }}>\n                {series.map((serie, index) => (\n                    <div key={index} style={{ margin: 15, display: 'flex', alignItems: 'center', }}>\n                        <div style={{\n                            width: 20,\n                            height: 20,\n                            backgroundColor: serie.color,\n                            marginRight: 5,\n\n                        }} />\n                        <span>{serie.label}</span>\n\n\n                    </div>\n                ))}\n            </div>\n        );\n    };\n\n\n    return (\n        <Box sx={{ m: 5 }}>\n            <Typography p={3} textAlign={'center'} variant='h4'>SALES OVERVIEW</Typography>\n            <Grid container spacing={3}>\n                {/* Display summary widgets */}\n                <Grid item xs={6} md={4} lg={2}>\n                    <Card>\n                        <CardContent>\n                            <Typography variant=\"body1\" gutterBottom>Total Products:</Typography>\n                            <Typography variant=\"body2\">{totalProducts}</Typography>\n                        </CardContent>\n                    </Card>\n                </Grid>\n                <Grid item xs={6} md={4} lg={2}>\n                    <Card>\n                        <CardContent>\n                            <Typography variant=\"body1\" gutterBottom>Total Orders:</Typography>\n                            <Typography variant=\"body2\">{totalOrders}</Typography>\n                        </CardContent>\n                    </Card>\n                </Grid>\n                <Grid item xs={6} md={4} lg={2}>\n                    <Card>\n                        <CardContent>\n                            <Typography variant=\"body1\" gutterBottom>Total Sales:</Typography>\n                            <Typography variant=\"body2\">{totalSales.toFixed(2)}</Typography>\n                        </CardContent>\n                    </Card>\n                </Grid>\n                <Grid item xs={6} md={4} lg={2}>\n                    <Card>\n                        <CardContent>\n                            <Typography variant=\"body1\" gutterBottom>Pending Orders:</Typography>\n                            <Typography variant=\"body2\">{pendingOrders}</Typography>\n                        </CardContent>\n                    </Card>\n                </Grid>\n                <Grid item xs={6} md={4} lg={2}>\n                    <Card>\n                        <CardContent>\n                            <Typography variant=\"body1\" gutterBottom>Total Admins: </Typography>\n                            <Typography variant=\"body2\">{totalAdmins}</Typography>\n                        </CardContent>\n                    </Card>\n                </Grid>\n                <Grid item xs={6} md={4} lg={2}>\n                    <Card>\n                        <CardContent>\n                            <Typography variant=\"body1\" gutterBottom>Total Accounts:  </Typography>\n                            <Typography variant=\"body2\">{totalCustomers}</Typography>\n                        </CardContent>\n                    </Card>\n                </Grid>\n                <Grid item xs={12} md={4} lg={6} >\n                    <Card>\n                        <CardContent >\n                            <Typography variant=\"body1\" gutterBottom>Recent Customer Registrations: </Typography>\n                            <Typography variant=\"body2\"> {recentCustomers.map(customer => <li key={customer._id}>{customer.firstName} {customer.lastName} - {customer.email}</li>)}</Typography>\n                        </CardContent>\n                    </Card>\n                </Grid>\n                <Grid item xs={12} md={8} lg={6}>\n                    <Card>\n                        <CardContent>\n                            <Typography variant=\"body1\">Guest Information:</Typography>\n                            {/* Display guest data */}\n                            {/*{guestData.map(guest => (\n                                <Box key={guest._id}>*/}\n                            <Typography variant=\"body2\">\n                                Total Guest Accounts: {guestData.length}\n                            </Typography>\n                            <Typography variant=\"body2\">\n                                Total Guest Orders: {totalGuestOrders}\n                            </Typography>\n                            <Typography variant=\"body2\">\n\n                            </Typography>\n\n\n                        </CardContent>\n                    </Card>\n                </Grid>\n\n                <Grid item xs={12} md={8} lg={12}>\n                    <Card>\n                        <CardContent>\n                            <Typography variant=\"body1\">Latest Orders:</Typography>\n                            {/* Display recent orders */}\n                            {recentOrders.map(order => (\n                                <Box key={order._id}>\n                                    <Typography component={Button} onClick={() => handleOpenDialog(order._id)} variant=\"body2\">\n                                        Order ID: {order._id} • Order Status: <strong>{order.orderStatus}</strong>\n                                    </Typography>\n                                    {currentOrderId === order._id && (\n                                        <OrderDetails\n                                            order={order}\n                                            open={currentOrderId === order._id}\n                                            onClose={() => setCurrentOrderId(null)}\n                                        />\n                                    )}\n                                </Box>\n                            ))}\n                        </CardContent>\n                    </Card>\n                </Grid>\n\n\n\n\n\n\n                <Box style={{ marginTop: '40px', }}>\n                    <Typography p={3} textAlign={'center'} variant='h5'>Best Sellers Data</Typography>\n                    <Legend series={chartSeries} />\n                </Box>\n                <BarChart\n                    dataset={salesData}\n                    slotProps={{\n                        legend: {\n                            hidden: true,\n\n                        },\n\n                    }}\n\n                    sx={{\n\n                    }}\n                    xAxis={[\n                        {\n                            scaleType: 'band',\n                            dataKey: 'month',\n\n                        },\n\n                    ]}\n                    series={chartSeries}\n                    {...chartSetting}\n                />\n            </Grid>\n        </Box>\n    );\n}\nexport default SalesOverview;","import React, { useEffect, useState } from 'react';\nimport {\n    AppBar,\n    Toolbar,\n    Typography,\n    Container,\n    Grid,\n    Paper,\n    Drawer,\n    List,\n    ListItem,\n    ListItemText,\n    IconButton,\n    Box,\n    ListItemIcon,\n    Menu,\n    MenuItem,\n    Button,\n} from '@mui/material';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport ProductList from '../components/ProductList';\nimport UserList from '../components/UserList';\nimport OrderList from '../components/OrderList';\nimport SalesOverview from '../components/SalesOverview';\nimport { useAuth } from '../components/Utilities/useAuth';\nimport { Link } from 'react-router-dom';\n\n\nconst AdminDashboard = () => {\n    useEffect(() => {\n        document.title = \"Admin Dashboard - Herba Naturals Management Portal\";\n        document.querySelector('meta[name=\"description\"]').setAttribute(\"content\", \"Herba Natural's Admin Dashboard. Manage products, orders, and customer interactions efficiently in our secure admin portal.\");\n    }, []);\n\n    const [sidebarOpen, setSidebarOpen] = useState(false);\n    const [selectedComponent, setSelectedComponent] = useState('AdminDashboard');\n    const [anchorEl, setAnchorEl] = useState(null);\n    const { isLoggedIn, logout, isAdmin } = useAuth();\n\n\n\n\n\n    // Function to handle menu open\n    const handleMenuOpen = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    // Function to handle menu close\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n    };\n\n\n    const handleSidebarToggle = () => {\n        setSidebarOpen(!sidebarOpen);\n    };\n\n    const handleSidebarItemClick = (component) => {\n        setSelectedComponent(component);\n        setSidebarOpen(false);\n    };\n\n\n    const handleLogout = () => {\n        logout();\n\n    };\n    // Function to generate sidebar menu items\n    const generateSidebarItems = () => {\n        const menuItems = [\n            {\n                icon: <svg height='24' version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" enableBackground=\"new 0 0 48 48\">\n                    <polygon fill=\"#E8EAF6\" points=\"42,39 6,39 6,23 24,6 42,23\" />\n                    <g fill=\"#C5CAE9\">\n                        <polygon points=\"39,21 34,16 34,9 39,9\" />\n                        <rect x=\"6\" y=\"39\" width=\"36\" height=\"5\" />\n                    </g>\n                    <polygon fill=\"#B71C1C\" points=\"24,4.3 4,22.9 6,25.1 24,8.4 42,25.1 44,22.9\" />\n                    <rect x=\"18\" y=\"28\" fill=\"#D84315\" width=\"12\" height=\"16\" />\n                    <rect x=\"21\" y=\"17\" fill=\"#01579B\" width=\"6\" height=\"6\" />\n                    <path fill=\"#FF8A65\" d=\"M27.5,35.5c-0.3,0-0.5,0.2-0.5,0.5v2c0,0.3,0.2,0.5,0.5,0.5S28,38.3,28,38v-2C28,35.7,27.8,35.5,27.5,35.5z\" />\n                </svg>, text: 'Dashboard Home', component: 'AdminDashboard'\n            },\n            {\n                icon: <svg height='24' version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" enableBackground=\"new 0 0 48 48\">\n                    <g fill=\"#3F51B5\">\n                        <polygon points=\"17.8,18.1 10.4,25.4 6.2,21.3 4,23.5 10.4,29.9 20,20.3\" />\n                        <polygon points=\"17.8,5.1 10.4,12.4 6.2,8.3 4,10.5 10.4,16.9 20,7.3\" />\n                        <polygon points=\"17.8,31.1 10.4,38.4 6.2,34.3 4,36.5 10.4,42.9 20,33.3\" />\n                    </g>\n                    <g fill=\"#90CAF9\">\n                        <rect x=\"24\" y=\"22\" width=\"20\" height=\"4\" />\n                        <rect x=\"24\" y=\"9\" width=\"20\" height=\"4\" />\n                        <rect x=\"24\" y=\"35\" width=\"20\" height=\"4\" />\n                    </g>\n                </svg>, text: 'Product List', component: 'productList'\n            },\n            {\n                icon: <svg height='24' version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" enableBackground=\"new 0 0 48 48\">\n                    <polygon fill=\"#FF9800\" points=\"24,37 19,31 19,25 29,25 29,31\" />\n                    <g fill=\"#FFA726\">\n                        <circle cx=\"33\" cy=\"19\" r=\"2\" />\n                        <circle cx=\"15\" cy=\"19\" r=\"2\" />\n                    </g>\n                    <path fill=\"#FFB74D\" d=\"M33,13c0-7.6-18-5-18,0c0,1.1,0,5.9,0,7c0,5,4,9,9,9s9-4,9-9C33,18.9,33,14.1,33,13z\" />\n                    <path fill=\"#424242\" d=\"M24,4c-6.1,0-10,4.9-10,11c0,0.8,0,2.3,0,2.3l2,1.7v-5l12-4l4,4v5l2-1.7c0,0,0-1.5,0-2.3c0-4-1-8-6-9l-1-2 H24z\" />\n                    <g fill=\"#784719\">\n                        <circle cx=\"28\" cy=\"19\" r=\"1\" />\n                        <circle cx=\"20\" cy=\"19\" r=\"1\" />\n                    </g>\n                    <polygon fill=\"#fff\" points=\"24,43 19,31 24,32 29,31\" />\n                    <polygon fill=\"#D32F2F\" points=\"23,35 22.3,39.5 24,43.5 25.7,39.5 25,35 26,34 24,32 22,34\" />\n                    <path fill=\"#546E7A\" d=\"M29,31L29,31l-5,12l-5-12c0,0-11,2-11,13h32C40,33,29,31,29,31z\" />\n                </svg>, text: 'User List', component: 'userList'\n            },\n            {\n                icon: <svg height='24' version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" enableBackground=\"new 0 0 48 48\">\n                    <g fill=\"#00BCD4\">\n                        <rect x=\"37\" y=\"18\" width=\"6\" height=\"24\" />\n                        <rect x=\"29\" y=\"26\" width=\"6\" height=\"16\" />\n                        <rect x=\"21\" y=\"22\" width=\"6\" height=\"20\" />\n                        <rect x=\"13\" y=\"32\" width=\"6\" height=\"10\" />\n                        <rect x=\"5\" y=\"28\" width=\"6\" height=\"14\" />\n                    </g>\n                    <g fill=\"#3F51B5\">\n                        <circle cx=\"8\" cy=\"16\" r=\"3\" />\n                        <circle cx=\"16\" cy=\"18\" r=\"3\" />\n                        <circle cx=\"24\" cy=\"11\" r=\"3\" />\n                        <circle cx=\"32\" cy=\"13\" r=\"3\" />\n                        <circle cx=\"40\" cy=\"9\" r=\"3\" />\n                        <polygon points=\"39.1,7.2 31.8,10.9 23.5,8.8 15.5,15.8 8.5,14.1 7.5,17.9 16.5,20.2 24.5,13.2 32.2,15.1 40.9,10.8\" />\n                    </g>\n                </svg>, text: 'Order List', component: 'orderList'\n            },\n        ];\n\n        return menuItems.map((item, index) => (\n            <ListItem\n                key={index}\n\n                onClick={() => handleSidebarItemClick(item.component)}\n            >\n                <Button variant='text' sx={{}}>\n                    <ListItemIcon>{item.icon}</ListItemIcon>\n                    <ListItemText primary={item.text} />\n                </Button>\n            </ListItem>\n        ));\n    };\n\n    const menuId = 'primary-search-account-menu';\n\n\n    return (\n        <div>\n            <AppBar position=\"static\">\n                <Toolbar sx={{ justifyContent: 'space-between', backgroundColor: '#283047' }}>\n                    <IconButton\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        onClick={handleSidebarToggle}\n                        sx={{ color: 'white', transition: '0.3s color ease', '&:hover': { transition: '0.3s color ease', color: '#FE6F49' } }}\n\n                    >\n                        <MenuIcon sx={{ fontSize: 32 }} />\n                    </IconButton>\n                    <Typography variant=\"h1\" component=\"h1\" sx={{ fontSize: 'h6.fontSize' }}>Admin Dashboard</Typography>\n                    <Box onClick={handleMenuOpen}>\n                        <IconButton\n                            size=\"large\"\n                            edge=\"end\"\n                            aria-label=\"account of current user\"\n                            sx={{ color: 'white', transition: '0.3s color ease', '&:hover': { transition: '0.3s color ease', color: '#FE6F49' } }}\n                        >\n                            <AccountCircle sx={{ fontSize: '32px' }} />\n                        </IconButton>\n                    </Box>\n                    {/* The menu */}\n                    <Menu\n                        anchorEl={anchorEl}\n                        anchorOrigin={{\n                            vertical: 'top',\n                            horizontal: 'right',\n                        }}\n                        id={menuId}\n                        keepMounted\n                        transformOrigin={{\n                            vertical: 'top',\n                            horizontal: 'right',\n                        }}\n                        open={Boolean(anchorEl)}\n                        onClose={handleMenuClose}\n                        sx={{ mt: 4, ml: 3 }}\n                    >\n                        {/* Menu items */}\n\n\n                        <MenuItem key=\"home\" onClick={handleMenuClose}>\n                            <Link style={{ textDecoration: 'none', color: 'black' }} to={'/'}>Home</Link>\n                        </MenuItem>\n                        <MenuItem key=\"admin\" onClick={handleMenuClose}>\n                            <Link style={{ textDecoration: 'none', color: 'black' }} to={'/customer/admin'}>Admin</Link>\n                        </MenuItem>\n\n                        <MenuItem key=\"account\" onClick={handleMenuClose}>\n                            <Link style={{ textDecoration: 'none', color: 'black' }} to={'/details'}>Account</Link>\n                        </MenuItem>\n                        <MenuItem key=\"logout\" onClick={handleLogout}>\n                            <span style={{ textDecoration: 'none', cursor: 'pointer' }}>Logout</span>\n                        </MenuItem>\n\n\n                    </Menu>\n                </Toolbar>\n            </AppBar>\n            <Container>\n                <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                        <Paper>\n                            {selectedComponent === 'AdminDashboard' && (<SalesOverview />)}\n                            {selectedComponent === 'productList' && <ProductList />}\n                            {selectedComponent === 'userList' && <UserList />}\n                            {selectedComponent === 'orderList' && <OrderList />}\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </Container>\n            <Drawer anchor=\"left\" open={sidebarOpen} onClose={handleSidebarToggle}>\n                <List>\n                    <ListItem sx={{ backgroundColor: 'inherit', textAlign: 'center' }}>\n                        <ListItemText primary=\"MENU\" />\n                    </ListItem>\n                    {generateSidebarItems()}\n                </List>\n            </Drawer>\n        </div>\n    );\n};\n\nexport default AdminDashboard;\n"],"names":["_ref","category","onAddCategory","onRemoveCategory","error","_useState","useState","_useState2","_slicedToArray","newCategory","setNewCategory","_useState3","_useState4","localError","setLocalError","useEffect","_jsxs","FormControl","sx","width","pl","py","pr","border","borderRadius","borderColor","theme","palette","main","color","fontSize","transition","name","component","children","_jsx","FormLabel","id","className","Box","display","alignItems","TextField","spellCheck","label","value","Boolean","onChange","e","target","Button","m","variant","onClick","trim","formattedCategory","toLowerCase","includes","map","index","Chip","size","onDelete","Typography","loading","selectedImage","selectedImageData","handleImage","setSelectedImageData","imageContainerStyles","flexDirection","margin","VisuallyHiddenInput","styled","clip","clipPath","height","overflow","position","bottom","left","whiteSpace","my","accept","startIcon","CloudUploadIcon","disabled","length","CircularProgress","type","multiple","ml","overflowX","gap","imgUrl","style","src","alt","concat","maxWidth","maxHeight","minWidth","minHeight","indexToRemove","newImages","filter","_","handleRemoveImage","marginTop","selectedStrength","handleStrengthChange","productData","handleChange","justifyContent","sm","xs","pb","RadioGroup","row","FormControlLabel","control","Radio","strength","textAlign","isFeatured","seoKeywords","onAddKeyword","onRemoveKeyword","newKeyword","setNewKeyword","formattedKeyword","seoKeyword","handleAddKeyword","handleRemoveKeyword","fullWidth","seo","multiline","rows","SeoKeywordsInput","weight","initialProductData","brand","price","specs","totalSold","imgSource","description","flavor","title","shipping","dimensions","open","onClose","onAddProduct","selectedProduct","onUpdateProduct","setProductData","setLoading","_useState5","_useState6","setError","_useState7","_useState8","setSelectedImage","_useState9","_useState10","_useState11","_useState12","setSelectedStrength","_useState13","_useState14","setIsNewImageSelected","clearForm","prevData","_objectSpread","urlOrObj","existingImageInfo","find","img","url","publicId","undefined","imageObj","event","_event$target","startsWith","seoField","replace","_defineProperty","dimensionProp","API_URL","HEADERS","handleAddProduct","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","productToUpdate","endpoint","method","response","wrap","_context","prev","next","prepareProductData","_id","makeApiCall","sent","handleApiResponse","t0","console","finish","stop","apply","arguments","productDataCopy","imageSource","formatImagesForUpdate","formatImagesForNewProduct","Array","isArray","_ref3","_callee2","data","_context2","abrupt","fetch","headers","credentials","body","JSON","stringify","_x","_x2","_x3","_ref4","_callee3","product","errorData","_context3","ok","json","message","_x4","buttonOptions","Dialog","PaperProps","DialogTitle","backgroundColor","DialogContent","DialogContentText","helperText","autoComplete","CategoryInput","_toConsumableArray","c","ImageUpload","files","from","forEach","file","reader","FileReader","readAsDataURL","onloadend","prevImages","result","StrengthFeaturedControl","newStrength","SEOSection","keyword","updatedKeywords","kw","ShippingInput","DialogActions","borderTop","paperProps","TableContainer","Paper","Table","TableBody","TableRow","TableCell","fontWeight","image","marginBottom","toFixed","join","Date","createdAt","toLocaleString","marginLeft","detailsViewOpen","setDetailsViewOpen","selectedProductForDetails","setSelectedProductForDetails","products","setProducts","isAddProductModalOpen","setAddProductModalOpen","isEditModalOpen","setEditModalOpen","setSelectedProduct","isLoading","setIsLoading","_useState15","_useState16","formatDate","dateString","date","Intl","DateTimeFormat","year","month","day","format","then","catch","p","DataGrid","columns","field","headerName","flex","renderCell","params","valueFormatter","mr","productId","window","confirm","updatedProducts","statusText","autoHeight","disableSelectionOnClick","getRowId","components","Toolbar","GridToolbar","AddProductModal","newProductData","updatedProduct","prevProducts","DetailsView","modalStyle","top","transform","bgcolor","boxShadow","customer","updateCustomerList","_ref$isViewOnly","isViewOnly","firstName","lastName","email","address","address2","city","state","zip","phone","country","orders","formData","setFormData","handleInputChange","Modal","Grid","container","spacing","item","toLocaleDateString","updatedCustomer","mt","editCustomerModalOpen","setEditCustomerModalOpen","selectedCustomer","setSelectedCustomer","customers","setCustomers","guests","setGuests","deleteConfirmationOpen","setDeleteConfirmationOpen","userToDelete","setUserToDelete","userTypeToDelete","setUserTypeToDelete","handleDeleteUser","userId","userType","confirmDeleteUser","prevCustomers","prevGuests","guest","alert","status","finally","admins","isAdmin","nonAdmins","handleEditCustomer","buttonStyles","padding","adminId","_Fragment","customerId","Error","EditCustomerModal","order","IconButton","xmlns","fill","d","dividers","gutterBottom","orderNumber","md","lg","Card","CardContent","customerEmail","createdBy","notes","totalAmount","grandTotal","subTotal","tax","shippingCost","orderStatus","orderDate","transactionId","shippingMethod","provider","labelUrl","trackingUrl","React","quantity","setOrders","filterCriteria","setFilterCriteria","searchKeyword","setSearchKeyword","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","filteredOrders","setFilteredOrders","selectedOrder","setSelectedOrder","_useState17","_useState18","isDialogOpen","setIsDialogOpen","filterOrders","filtered","_order$address","_order$shippingMethod","_order$products$produ","productNames","toString","handleOrderStatusChange","orderId","newStatus","updatedOrder","updatedOrders","Tooltip","textOverflow","Select","MenuItem","viewBox","version","enableBackground","cx","cy","r","points","mb","flexGrow","InputLabel","px","defaultValue","onCellClick","Snackbar","autoHideDuration","OrderDetails","salesData","setSalesData","totalProducts","setTotalProducts","totalOrders","setTotalOrders","totalSales","setTotalSales","pendingOrders","setPendingOrders","recentOrders","setRecentOrders","totalAdmins","setTotalAdmins","totalCustomers","setTotalCustomers","_useState19","_useState20","setRecentAdmins","_useState21","_useState22","recentCustomers","setRecentCustomers","_useState23","_useState24","_useState25","_useState26","_useState27","_useState28","_useState29","_useState30","currentOrderId","setCurrentOrderId","_useState31","_useState32","guestData","setGuestData","totalGuestOrders","reduce","total","aggregateSalesData","aggregatedData","monthKey","totalQuantity","monthNames","transformAndSortDataForChart","transformedData","previousMonthProducts","Set","Object","keys","monthNumber","parseInt","split","monthName","values","sort","a","b","currentMonthProducts","slice","productNameKey","add","productName","has","fetchData","signal","controller","AbortController","fetchAllData","guestDataResponse","orderData","sortedOrders","customerData","chartData","sum","registrationDate","abort","chartSetting","yAxis","axisClasses","tickLabel","xAxis","scaleType","dataKey","numericValue","parseFloat","isNaN","chartSeries","array","i","j","Math","floor","shuffleArray","key","generateChartSeries","Legend","series","flexWrap","serie","marginRight","BarChart","dataset","slotProps","legend","hidden","document","querySelector","setAttribute","sidebarOpen","setSidebarOpen","selectedComponent","setSelectedComponent","anchorEl","setAnchorEl","_useAuth","useAuth","logout","isLoggedIn","handleMenuClose","handleSidebarToggle","AppBar","edge","MenuIcon","currentTarget","AccountCircle","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","Link","textDecoration","to","cursor","Container","SalesOverview","ProductList","UserList","OrderList","Drawer","anchor","List","ListItem","ListItemText","primary","icon","x","y","text","ListItemIcon"],"sourceRoot":""}