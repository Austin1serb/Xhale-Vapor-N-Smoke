{"version":3,"file":"static/js/204.9f3cf891.chunk.js","mappings":"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","sources":["components/ForgotPassword.jsx","pages/AccountDetails.jsx"],"sourcesContent":["import { Button, CircularProgress, IconButton, TextField, Typography } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\n\n// ForgotPassword.jsx\nconst ForgotPassword = ({ close, type, resetEmail, startCountdown, countdown, isButtonDisabled }) => {\n    const [email, setEmail] = useState(resetEmail || '');\n    const [message, setMessage] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [errors, setErrors] = useState({});\n\n\n\n\n\n    const handleSubmit = async (e) => {\n        setErrors({});\n\n        if (email.trim() === '') {\n            setErrors(errors => ({ ...errors, email: 'Email is required' }));\n            return\n        }\n        else {\n            const emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\n            if (!emailRegex.test(email.trim())) {\n\n                setErrors(errors => ({ ...errors, email: 'Please enter a valid email address' }));\n\n                return\n            }\n\n        }\n        e.preventDefault();\n        try {\n            setLoading(true);\n\n            const response = await fetch('http://localhost:8000/api/forgot-password', {\n                method: 'POST',\n                credentials: 'include',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ email })\n            });\n\n            const data = await response.json();\n            if (response.ok) {\n                setLoading(false);\n                setMessage(data.message);\n                startCountdown();\n\n            } if (response.status === 429) {\n                setErrors({ email: response.statusText, });\n\n            } else {\n                // If the response contains field-specific errors\n                if (data.errors && data.errors.email) {\n                    setErrors({ email: data.errors.email });\n                } else {\n                    // General error message\n                    setMessage(data.message || 'Error occurred');\n                }\n            }\n        } catch (error) {\n            setLoading(false);\n            // Handle network or other errors here\n            setErrors({ message: error.message });\n\n        }\n        finally {\n            setLoading(false);\n\n        }\n    };\n\n\n    const styles = {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        width: '300px',\n        height: '410px',\n        backgroundColor: 'white',\n        bgcolor: 'background.paper',\n\n\n        borderRadius: '5px',\n        border: '0.1px solid black',\n    }\n    return (\n\n        <div style={styles}>\n\n            <Typography sx={{ backgroundColor: '#0F75E0', padding: 2, color: 'white', pb: 2 }} variant=\"h5\" align=\"center\" >\n                {type === 'change' ? ('Reset Password') : (' Forgot Password')}\n            </Typography>\n            <IconButton style={{ transform: 'translate(240px, -60px)', color: '#282F48' }} onClick={() => close(false)}>\n\n\n                {/* CLOSE ICON */}\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill='white' height=\"40\" width=\"40\"><path d=\"m10.458 31.458-1.916-1.916 9.5-9.542-9.5-9.542 1.916-1.916 9.542 9.5 9.542-9.5 1.916 1.916-9.5 9.542 9.5 9.542-1.916 1.916-9.542-9.5Z\" /></svg>\n\n\n\n            </IconButton>\n            <div >\n            </div>\n            <Typography mb={4} mt={{ sm: -3, md: 0 }} textAlign='center' variant=\"body2\">Send a link to reset  <br />  your password</Typography>\n            <div style={{ padding: 10 }}>\n                <TextField\n                    id=\"email-reset\"\n                    type=\"email\"\n                    autoComplete=\"email\"\n                    label=\"Email Address\"\n                    disabled={type === 'change' ? true : false}\n                    //fill with reset email if type === change\n\n                    value={type === 'change' ? resetEmail : email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    required\n                    fullWidth\n                    error={!!errors.email}\n                    helperText={errors.email || ''}\n                    name=\"email\"\n                />\n                {message && <h3 style={{ textAlign: 'center', color: '#30842E', marginTop: '5px' }}>{message}!</h3>}\n                <Button\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                    fullWidth\n                    onClick={handleSubmit}\n                    disabled={isButtonDisabled || loading}\n                    type=\"submit\"\n                    sx={{ mt: 8, height: '50px' }}\n                >\n                    {loading ? (\n                        <CircularProgress size={24} />\n                    ) : isButtonDisabled ? (\n                        `Resend Link (${countdown})`\n                    ) : (\n                        'Send Link'\n                    )}\n                </Button>\n\n\n            </div>\n        </div>\n\n    );\n};\n\n\n\nexport default ForgotPassword\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\nimport {\n    Paper,\n    Typography,\n    Box,\n    Button,\n    TextField,\n    Grid,\n    CircularProgress,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n    Modal,\n    Divider,\n} from '@mui/material';\nimport { useAuth } from '../components/Utilities/useAuth';\nimport ForgotPassword from '../components/ForgotPassword';\n\nconst AccountDetails = () => {\n    useEffect(() => {\n        document.title = \"Your Account Details - Herba Naturals User Profile\";\n        document.querySelector('meta[name=\"description\"]').setAttribute(\"content\", \"Manage your Herba Naturals account details. Update personal information, track orders, and customize your CBD shopping experience.\");\n    }, []);\n\n\n\n    const { deleteUser } = useAuth();\n    const [customer, setCustomer] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [loadingPage, setLoadingPage] = useState(false);\n    const [errors, setErrors] = useState({});\n    const [isFormChanged, setIsFormChanged] = useState(false);\n    const navigate = useNavigate();\n    const [openDialog, setOpenDialog] = useState(false);\n    const [forgotPasswordOpen, setForgotPasswordOpen] = useState(false);\n    const [countdown, setCountdown] = useState(30);\n    const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n    const startCountdown = () => {\n        setIsButtonDisabled(true);\n        setCountdown(30);\n\n        const interval = setInterval(() => {\n            setCountdown((currentCountdown) => {\n                if (currentCountdown <= 1) {\n                    clearInterval(interval);\n                    setIsButtonDisabled(false);\n                    return 0;\n                }\n                return currentCountdown - 1;\n            });\n        }, 1000);\n    };\n\n    // Call startCountdown in handleSubmit on successful send\n\n\n\n\n\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (!token) {\n            navigate('/login');\n        } else {\n            const decodedToken = jwtDecode(token);\n            const userId = decodedToken.customerId;\n            fetchCustomerData(userId);\n        }\n\n    }, [navigate]);\n\n\n    const fetchOrders = async (orderIds) => {\n        const orders = await Promise.all(orderIds.map(orderId =>\n            fetch(`http://localhost:8000/api/order/${orderId}`, { credentials: 'include' })\n                .then(response => response.json())\n                .catch(error => {\n                    console.error('Error fetching order:', orderId, error)\n\n                })\n        ));\n        return orders.filter(order => order != null); // Filter out any failed requests\n    };\n\n    const fetchCustomerData = async (userId) => {\n        setLoadingPage(true);\n        try {\n            const response = await fetch(`http://localhost:8000/api/customer/${userId}`, { credentials: 'include' });\n            if (!response.ok) throw new Error('Network response was not ok');\n\n            const customerData = await response.json();\n            setCustomer(customerData);\n\n            // Fetch orders if they exist\n            if (customerData.orders && customerData.orders.length > 0) {\n                const orders = await fetchOrders(customerData.orders);\n                setCustomer(prev => ({ ...prev, orders })); // Append orders to customer state\n            }\n        } catch (error) {\n            console.error('Error fetching customer data:', error);\n        } finally {\n            setLoadingPage(false);\n        }\n    };\n\n\n\n    const handleChange = (e) => {\n        setCustomer({ ...customer, [e.target.name]: e.target.value });\n        setIsFormChanged(true);\n    };\n\n\n\n\n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n        setErrors({}); // Clear any previous error\n        setLoading(true)\n\n        try {\n            const response = await fetch(`http://localhost:8000/api/customer/${customer._id}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n\n                },\n                credentials: 'include',\n                body: JSON.stringify(customer),\n            });\n\n            if (!response.ok) {\n                const errorData = await response.json(); // Try to parse the error response\n                console.error('Error updating customer data:', errorData);\n\n                // Handle validation errors here\n                if (errorData.message === 'Validation error' && errorData.error) {\n                    const validationErrors = {};\n                    Object.keys(errorData.error.errors).forEach((fieldName) => {\n\n                        console.error(`Validation error for ${fieldName}: ${errorData.error.errors[fieldName].message}`);\n\n                        validationErrors[fieldName] = errorData.error.errors[fieldName].message;\n                    });\n                    setErrors(validationErrors);\n                    setLoading(false)\n                }\n            } else {\n                const data = await response.json();\n\n                setCustomer(data);\n                setLoading(false)\n                setIsFormChanged(false);\n                window.alert('Account Succssfully Updated!')\n\n            }\n        } catch (error) {\n            console.error('Unknown error occurred:', error);\n        }\n        finally {\n            setLoading(false)\n\n        }\n    };\n\n\n\n\n    const handleDeleteAccount = () => {\n\n        fetch(`http://localhost:8000/api/customer/${customer._id}`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n\n            },\n            credentials: 'include',\n        })\n            .then(async response => {\n                if (!response.ok) {\n                    throw new Error('Error deleting account');\n                }\n                await deleteUser();\n                navigate('/');\n            })\n            .catch(error => console.error('Error:', error));\n    };\n\n    const handleOpenDialog = () => {\n        setOpenDialog(true);\n    };\n\n    const handleCloseDialog = () => {\n        setOpenDialog(false);\n    };\n\n    const renderOrderItem = (item) => (\n        <Grid container key={item} spacing={1} sx={{ marginBottom: 1 }}>\n            <Grid item xs={3}>\n                <img src={item.img} alt={item.name} style={{ width: '100%', height: 'auto' }} />\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant=\"subtitle2\">{item.name}</Typography>\n                <Typography variant=\"body2\">Price: ${item.price ? item.price.toFixed(2) : 'N/A'}</Typography>\n                <Typography variant=\"body2\">Quantity: {item.quantity || 'N/A'}</Typography>\n            </Grid>\n        </Grid>\n    );\n\n    const renderOrders = () => {\n        return customer && customer.orders && customer.orders.length > 0 ? (\n            customer.orders.map((order, index) => (\n                <Paper key={index} sx={{ padding: 2, marginBottom: 3 }}>\n                    <Typography variant=\"h6\">Order #{order.orderNumber}</Typography>\n                    <Typography variant=\"body2\">Order Date: {order.orderDate ? new Date(order.orderDate).toLocaleDateString() : 'N/A'}</Typography>\n                    <Typography variant=\"body2\">Total Amount: ${order.totalAmount ? order.totalAmount.grandTotal.toFixed(2) : 'N/A'}</Typography>\n                    <Typography variant=\"body2\">Order Status: {order.orderStatus || 'Unknown'}</Typography>\n                    <Typography variant=\"body2\">Payment Status: {order.paymentStatus || 'N/A'}</Typography>\n                    <Divider sx={{ my: 2 }} />\n                    {order.products && order.products.length > 0 ? (\n                        order.products.map((item, idx) => renderOrderItem(item))\n                    ) : (\n                        <Typography variant=\"body2\">No products in this order.</Typography>\n                    )}\n                    <Divider sx={{ my: 2 }} />\n                    {order.shippingMethod && (\n                        <Typography variant=\"body2\">Shipping Method: {order.shippingMethod.name}</Typography>\n                    )}\n                    <Typography variant=\"body2\">Address: {order.address || 'N/A'}</Typography>\n                    {order.orderNotes && (\n                        <Typography variant=\"body2\">Notes: {order.orderNotes}</Typography>\n                    )}\n                </Paper>\n            ))\n        ) : (\n            <Typography variant=\"body2\">You have no orders.</Typography>\n        );\n    };\n\n\n\n    if (loadingPage) {\n        return (\n            <Paper sx={{ p: 2, maxWidth: 800, margin: '0 auto', marginTop: 4 }}>\n                <Typography variant=\"h5\" sx={{ marginBottom: 2 }}>\n                    Loading Account Details...\n                    <CircularProgress />\n                </Typography>\n\n            </Paper>\n        );\n    }\n\n    return (\n        <Paper sx={{ p: 4, maxWidth: 800, margin: '0px auto', marginTop: 5, marginBottom: 5 }}>\n            <Typography variant=\"h1\" component=\"h1\" sx={{ marginBottom: 2, fontSize: 'h5.fontSize' }}>\n                Account Details\n            </Typography>\n\n            <form onSubmit={handleFormSubmit}>\n                <Grid container spacing={2}>\n                    {/* Add more fields here */}\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            autoComplete=\"given-name\"\n                            name=\"firstName\"\n                            label=\"First Name\"\n                            fullWidth\n                            value={customer?.firstName || ''}\n                            onChange={handleChange}\n                            error={!!errors.firstName}\n                            helperText={errors.firstName}\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            label=\"Last Name\"\n                            fullWidth\n                            autoComplete=\"family-name\"\n                            name=\"lastName\"\n                            value={customer?.lastName || ''}\n                            onChange={handleChange}\n                            error={!!errors.lastName}\n                            helperText={errors.lastName}\n\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            label=\"Email\"\n                            fullWidth\n\n                            autoComplete=\"email\"\n                            type='email'\n                            id='email'\n                            name=\"email\"\n                            value={customer?.email || ''}\n                            onChange={handleChange}\n                            error={!!errors.email}\n                            helperText={errors.email ? errors.email :\n                                <span>\n                                    {/* information icon */}\n                                    <svg height='16' fill='#0F75E0' style={{ transform: 'translateY(3px)' }} viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22ZM12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20ZM11 7H13V9H11V7ZM11 11H13V17H11V11Z\" /></svg>\n                                    {' This will change the email associated with your account'}\n                                </span>\n                            }\n                        />\n                    </Grid>\n                    {/* Address Line 1 */}\n                    <Grid item xs={12}>\n                        <TextField\n                            label=\"Address\"\n                            fullWidth\n                            name=\"address1\"\n                            autoComplete=\"address-line1\"\n                            value={customer?.address || ''}\n                            onChange={handleChange}\n                        />\n                    </Grid>\n\n                    {/* Address Line 2 */}\n                    <Grid item xs={12}>\n                        <TextField\n                            label=\"Address Line 2\"\n                            fullWidth\n                            autoComplete=\"address-line2\"\n                            name=\"address2\"\n                            value={customer?.address2 || ''}\n                            onChange={handleChange}\n                        />\n                    </Grid>\n\n                    {/* City */}\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            label=\"City\"\n                            fullWidth\n                            name=\"city\"\n                            autoComplete=\"address-level2\"\n                            value={customer?.city || ''}\n                            onChange={handleChange}\n                        />\n                    </Grid>\n\n                    {/* State */}\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            label=\"State\"\n                            fullWidth\n                            name=\"state\"\n                            autoComplete=\"address-level1\"\n                            value={customer?.state || ''}\n                            onChange={handleChange}\n                        />\n                    </Grid>\n\n                    {/* Zip Code */}\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            label=\"Zip\"\n                            fullWidth\n                            name=\"zip\"\n                            autoComplete=\"postal-code\"\n                            value={customer?.zip || ''}\n                            onChange={handleChange}\n                        />\n                    </Grid>\n\n                    {/* Phone Number */}\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            label=\"Phone\"\n                            fullWidth\n                            name=\"phone\"\n                            type=\"tel\"\n                            autoComplete=\"tel\"\n                            value={customer?.phone || ''}\n                            onChange={handleChange}\n                        />\n                    </Grid>\n\n                    {/* Country */}\n                    <Grid item xs={12}>\n                        <TextField\n                            autoComplete=\"country-name\"\n                            label=\"Country\"\n                            fullWidth\n                            name=\"country\"\n                            value={customer?.country || ''}\n                            onChange={handleChange}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n\n                        <Typography variant=\"body2\" align=\"center\" mt={2}>\n                            <Button\n                                type='button'\n                                onClick={() => setForgotPasswordOpen(true)}\n                                color=\"primary\"\n                            >\n                                Change your password?\n                            </Button>\n                        </Typography>\n                        <Modal\n                            open={forgotPasswordOpen}\n                            onClose={() => setForgotPasswordOpen(false)}\n                            aria-labelledby=\"forgot-password-modal\"\n                            aria-describedby=\"forgot-password-form\"\n\n                        >\n                            <div >\n                                <ForgotPassword\n                                    close={setForgotPasswordOpen}\n                                    type={'change'}\n                                    resetEmail={customer?.email}\n                                    startCountdown={startCountdown}\n                                    isButtonDisabled={isButtonDisabled}\n                                    countdown={countdown}\n\n                                />\n                            </div>\n                        </Modal>\n                    </Grid>\n                    {renderOrders()}\n                </Grid>\n                <Box sx={{ marginTop: 2, height: '90px', display: 'flex', justifyContent: 'space-between', alignItems: 'center', flexDirection: { xs: 'column', sm: 'row' } }}>\n                    <Button\n                        style={{ width: '210px' }}\n                        disabled={loading || !isFormChanged}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        type=\"submit\"\n                    >\n                        {loading ? <CircularProgress size={24} /> : 'Save Changes'}\n                    </Button>\n                    <Button\n                        style={{ width: '210px' }}\n                        variant=\"contained\"\n                        color=\"error\"\n                        onClick={handleOpenDialog}\n\n                    >\n                        Delete Account\n                    </Button>\n                </Box>\n            </form>\n            <Dialog\n                open={openDialog}\n                onClose={handleCloseDialog}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"Delete Your Account?\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        Are you sure you want to delete your account? This action cannot be undone.\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleCloseDialog} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleDeleteAccount} color=\"primary\" autoFocus>\n                        Confirm\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Paper>\n    );\n}\n\nexport default AccountDetails;"],"names":["_ref","close","type","resetEmail","startCountdown","countdown","isButtonDisabled","_useState","useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","message","setMessage","_useState5","_useState6","loading","setLoading","_useState7","_useState8","errors","setErrors","handleSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","response","data","wrap","_context","prev","next","trim","_objectSpread","abrupt","test","preventDefault","fetch","method","credentials","headers","body","JSON","stringify","sent","json","ok","status","statusText","t0","finish","stop","_x","apply","arguments","_jsxs","style","position","top","left","transform","width","height","backgroundColor","bgcolor","borderRadius","border","children","_jsx","Typography","sx","padding","color","pb","variant","align","IconButton","onClick","xmlns","fill","d","mb","mt","sm","md","textAlign","TextField","id","autoComplete","label","disabled","value","onChange","target","required","fullWidth","error","helperText","name","marginTop","Button","CircularProgress","size","concat","useEffect","document","title","querySelector","setAttribute","deleteUser","useAuth","customer","setCustomer","loadingPage","setLoadingPage","_useState9","_useState10","isFormChanged","setIsFormChanged","navigate","useNavigate","_useState11","_useState12","openDialog","setOpenDialog","_useState13","_useState14","forgotPasswordOpen","setForgotPasswordOpen","_useState15","_useState16","setCountdown","_useState17","_useState18","setIsButtonDisabled","token","localStorage","getItem","userId","jwtDecode","customerId","fetchCustomerData","fetchOrders","orderIds","orders","Promise","all","map","orderId","then","catch","console","filter","order","_callee2","customerData","_context2","Error","length","_x2","handleChange","_defineProperty","handleFormSubmit","_ref3","_callee3","event","errorData","validationErrors","_context3","_id","Object","keys","forEach","fieldName","window","alert","_x3","handleCloseDialog","Paper","p","maxWidth","margin","marginBottom","component","fontSize","onSubmit","Grid","container","spacing","item","xs","firstName","lastName","viewBox","address","address2","city","state","zip","phone","country","Modal","open","onClose","ForgotPassword","interval","setInterval","currentCountdown","clearInterval","index","orderNumber","orderDate","Date","toLocaleDateString","totalAmount","grandTotal","toFixed","orderStatus","paymentStatus","Divider","my","products","idx","src","img","alt","price","quantity","renderOrderItem","shippingMethod","orderNotes","Box","display","justifyContent","alignItems","flexDirection","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","_ref4","_callee4","_context4","_x4","autoFocus"],"sourceRoot":""}