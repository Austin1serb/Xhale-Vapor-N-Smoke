{"version":3,"file":"static/js/84.24a476f2.chunk.js","mappings":"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","sources":["pages/ResetPassword.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Button, CircularProgress, TextField, Typography } from '@mui/material';\n\nconst ResetPassword = () => {\n    useEffect(() => {\n        document.title = \"Reset Your Password - Herba NaturalAccount Assistance\";\n        document.querySelector('meta[name=\"description\"]').setAttribute(\"content\", \"Easily reset your Herba Naturalaccount password. Secure and efficient password recovery for uninterrupted access to our CBD products.\");\n    }, []);\n\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [message, setMessage] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [errors, setErrors] = useState({});\n    const [success, setSuccess] = useState(false)\n    const token = useParams().token; // Retrieve token from URL\n    const navigate = useNavigate();\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setMessage('');\n        setErrors({});\n        // Password length and strength validation\n        if (password.length < 8) {\n            setErrors(errors => ({ ...errors, password: 'Password must be at least 8 characters long' }));\n            return\n\n        } else if (!/[A-Z]/.test(password) || !/[0-9]/.test(password)) {\n            setErrors(errors => ({ ...errors, password: 'Password must contain at least one uppercase letter, and one number' }));\n            return\n\n        }\n\n        if (password !== confirmPassword) {\n            setErrors(errors => ({ ...errors, confirmPassword: 'Passwords do not match' }));\n            return;\n        }\n\n        try {\n\n            setLoading(true);\n            const response = await fetch('http://localhost:8000/api/reset-password', {\n                method: 'POST',\n                credentials: 'include',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ token, password })\n            });\n\n            const data = await response.json();\n            setLoading(false);\n            if (response.ok) {\n                setMessage('Password has been reset successfully!');\n                setSuccess(true)\n                setTimeout(() => navigate('/login'), 2000); // 2 seconds delay\n            } else {\n                setErrors({ password: data.message || 'Error occurred' })\n                throw new Error(data.message || 'Error occurred');\n                setSuccess(false)\n            }\n        } catch (error) {\n            setLoading(false);\n            setSuccess(false)\n            setErrors({ password: error.message || 'Error occurred' })\n        }\n    };\n\n    const formStyle = {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: '20px',\n        maxWidth: '400px',\n        margin: 'auto',\n        marginTop: '50px',\n        marginBottom: '50px',\n    };\n\n    return (\n        <div style={formStyle}>\n            <Typography variant=\"h5\" component=\"h1\" align=\"center\">\n                Reset Password\n            </Typography>\n            <form onSubmit={handleSubmit}>\n                <TextField\n                    name='password'\n                    label=\"New Password\"\n                    type=\"password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    fullWidth\n                    margin=\"normal\"\n                    required\n                    error={!!errors.password}\n                    helperText={errors.password}\n                />\n                <TextField\n                    name='confirmPassword'\n                    label=\"Confirm Password\"\n                    type=\"password\"\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                    fullWidth\n                    margin=\"normal\"\n                    required\n                    error={!!errors.confirmPassword}\n                    helperText={errors.confirmPassword}\n                />\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    type=\"submit\"\n                    disabled={loading || !!success}\n                    sx={{ mt: 2, height: '50px' }}\n                >\n                    {loading ? <CircularProgress size={24} /> : 'Reset Password'}\n                </Button>\n                {message && (\n                    <Typography style={{ color: '#30842E' }} mt={2}>\n                        {message}\n                    </Typography>\n                )}\n            </form>\n        </div>\n    );\n};\n\nexport default ResetPassword;\n"],"names":["ResetPassword","useEffect","document","title","querySelector","setAttribute","password","setPassword","useState","confirmPassword","setConfirmPassword","message","setMessage","loading","setLoading","errors","setErrors","success","setSuccess","token","useParams","navigate","useNavigate","_jsxs","style","display","flexDirection","alignItems","justifyContent","padding","maxWidth","margin","marginTop","marginBottom","children","_jsx","Typography","variant","component","align","onSubmit","async","e","preventDefault","length","test","response","fetch","method","credentials","headers","body","JSON","stringify","data","json","ok","Error","setTimeout","error","TextField","name","label","type","value","onChange","target","fullWidth","required","helperText","Button","color","disabled","sx","mt","height","CircularProgress","size"],"sourceRoot":""}